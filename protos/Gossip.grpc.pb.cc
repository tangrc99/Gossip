// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: Gossip.proto

#include "Gossip.pb.h"
#include "Gossip.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace pf_gossip {

static const char* Gossip_method_names[] = {
  "/pf_gossip.Gossip/search",
  "/pf_gossip.Gossip/pull",
  "/pf_gossip.Gossip/echo",
  "/pf_gossip.Gossip/EstablishConnection",
  "/pf_gossip.Gossip/heartBeat",
  "/pf_gossip.Gossip/newNodeNotify",
  "/pf_gossip.Gossip/deleteNodeNotify",
};

std::unique_ptr< Gossip::Stub> Gossip::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Gossip::Stub> stub(new Gossip::Stub(channel, options));
  return stub;
}

Gossip::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_search_(Gossip_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_pull_(Gossip_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_echo_(Gossip_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_EstablishConnection_(Gossip_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_heartBeat_(Gossip_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_newNodeNotify_(Gossip_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_deleteNodeNotify_(Gossip_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Gossip::Stub::search(::grpc::ClientContext* context, const ::pf_gossip::Message& request, ::pf_gossip::SearchResult* response) {
  return ::grpc::internal::BlockingUnaryCall< ::pf_gossip::Message, ::pf_gossip::SearchResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_search_, context, request, response);
}

void Gossip::Stub::async::search(::grpc::ClientContext* context, const ::pf_gossip::Message* request, ::pf_gossip::SearchResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::pf_gossip::Message, ::pf_gossip::SearchResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_search_, context, request, response, std::move(f));
}

void Gossip::Stub::async::search(::grpc::ClientContext* context, const ::pf_gossip::Message* request, ::pf_gossip::SearchResult* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_search_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::pf_gossip::SearchResult>* Gossip::Stub::PrepareAsyncsearchRaw(::grpc::ClientContext* context, const ::pf_gossip::Message& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::pf_gossip::SearchResult, ::pf_gossip::Message, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_search_, context, request);
}

::grpc::ClientAsyncResponseReader< ::pf_gossip::SearchResult>* Gossip::Stub::AsyncsearchRaw(::grpc::ClientContext* context, const ::pf_gossip::Message& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsearchRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Gossip::Stub::pull(::grpc::ClientContext* context, const ::pf_gossip::SlotUpdate& request, ::pf_gossip::updateResult* response) {
  return ::grpc::internal::BlockingUnaryCall< ::pf_gossip::SlotUpdate, ::pf_gossip::updateResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_pull_, context, request, response);
}

void Gossip::Stub::async::pull(::grpc::ClientContext* context, const ::pf_gossip::SlotUpdate* request, ::pf_gossip::updateResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::pf_gossip::SlotUpdate, ::pf_gossip::updateResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_pull_, context, request, response, std::move(f));
}

void Gossip::Stub::async::pull(::grpc::ClientContext* context, const ::pf_gossip::SlotUpdate* request, ::pf_gossip::updateResult* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_pull_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::pf_gossip::updateResult>* Gossip::Stub::PrepareAsyncpullRaw(::grpc::ClientContext* context, const ::pf_gossip::SlotUpdate& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::pf_gossip::updateResult, ::pf_gossip::SlotUpdate, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_pull_, context, request);
}

::grpc::ClientAsyncResponseReader< ::pf_gossip::updateResult>* Gossip::Stub::AsyncpullRaw(::grpc::ClientContext* context, const ::pf_gossip::SlotUpdate& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncpullRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Gossip::Stub::echo(::grpc::ClientContext* context, const ::pf_gossip::Message& request, ::pf_gossip::Message* response) {
  return ::grpc::internal::BlockingUnaryCall< ::pf_gossip::Message, ::pf_gossip::Message, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_echo_, context, request, response);
}

void Gossip::Stub::async::echo(::grpc::ClientContext* context, const ::pf_gossip::Message* request, ::pf_gossip::Message* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::pf_gossip::Message, ::pf_gossip::Message, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_echo_, context, request, response, std::move(f));
}

void Gossip::Stub::async::echo(::grpc::ClientContext* context, const ::pf_gossip::Message* request, ::pf_gossip::Message* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_echo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::pf_gossip::Message>* Gossip::Stub::PrepareAsyncechoRaw(::grpc::ClientContext* context, const ::pf_gossip::Message& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::pf_gossip::Message, ::pf_gossip::Message, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_echo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::pf_gossip::Message>* Gossip::Stub::AsyncechoRaw(::grpc::ClientContext* context, const ::pf_gossip::Message& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncechoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Gossip::Stub::EstablishConnection(::grpc::ClientContext* context, const ::pf_gossip::GossipNodeInfo& request, ::pf_gossip::GossipNodeInfo* response) {
  return ::grpc::internal::BlockingUnaryCall< ::pf_gossip::GossipNodeInfo, ::pf_gossip::GossipNodeInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_EstablishConnection_, context, request, response);
}

void Gossip::Stub::async::EstablishConnection(::grpc::ClientContext* context, const ::pf_gossip::GossipNodeInfo* request, ::pf_gossip::GossipNodeInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::pf_gossip::GossipNodeInfo, ::pf_gossip::GossipNodeInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EstablishConnection_, context, request, response, std::move(f));
}

void Gossip::Stub::async::EstablishConnection(::grpc::ClientContext* context, const ::pf_gossip::GossipNodeInfo* request, ::pf_gossip::GossipNodeInfo* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EstablishConnection_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::pf_gossip::GossipNodeInfo>* Gossip::Stub::PrepareAsyncEstablishConnectionRaw(::grpc::ClientContext* context, const ::pf_gossip::GossipNodeInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::pf_gossip::GossipNodeInfo, ::pf_gossip::GossipNodeInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_EstablishConnection_, context, request);
}

::grpc::ClientAsyncResponseReader< ::pf_gossip::GossipNodeInfo>* Gossip::Stub::AsyncEstablishConnectionRaw(::grpc::ClientContext* context, const ::pf_gossip::GossipNodeInfo& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncEstablishConnectionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Gossip::Stub::heartBeat(::grpc::ClientContext* context, const ::pf_gossip::NodeVersions& request, ::pf_gossip::NodeVersions* response) {
  return ::grpc::internal::BlockingUnaryCall< ::pf_gossip::NodeVersions, ::pf_gossip::NodeVersions, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_heartBeat_, context, request, response);
}

void Gossip::Stub::async::heartBeat(::grpc::ClientContext* context, const ::pf_gossip::NodeVersions* request, ::pf_gossip::NodeVersions* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::pf_gossip::NodeVersions, ::pf_gossip::NodeVersions, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_heartBeat_, context, request, response, std::move(f));
}

void Gossip::Stub::async::heartBeat(::grpc::ClientContext* context, const ::pf_gossip::NodeVersions* request, ::pf_gossip::NodeVersions* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_heartBeat_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::pf_gossip::NodeVersions>* Gossip::Stub::PrepareAsyncheartBeatRaw(::grpc::ClientContext* context, const ::pf_gossip::NodeVersions& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::pf_gossip::NodeVersions, ::pf_gossip::NodeVersions, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_heartBeat_, context, request);
}

::grpc::ClientAsyncResponseReader< ::pf_gossip::NodeVersions>* Gossip::Stub::AsyncheartBeatRaw(::grpc::ClientContext* context, const ::pf_gossip::NodeVersions& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncheartBeatRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Gossip::Stub::newNodeNotify(::grpc::ClientContext* context, const ::pf_gossip::GossipNodeInfo& request, ::pf_gossip::updateResult* response) {
  return ::grpc::internal::BlockingUnaryCall< ::pf_gossip::GossipNodeInfo, ::pf_gossip::updateResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_newNodeNotify_, context, request, response);
}

void Gossip::Stub::async::newNodeNotify(::grpc::ClientContext* context, const ::pf_gossip::GossipNodeInfo* request, ::pf_gossip::updateResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::pf_gossip::GossipNodeInfo, ::pf_gossip::updateResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_newNodeNotify_, context, request, response, std::move(f));
}

void Gossip::Stub::async::newNodeNotify(::grpc::ClientContext* context, const ::pf_gossip::GossipNodeInfo* request, ::pf_gossip::updateResult* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_newNodeNotify_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::pf_gossip::updateResult>* Gossip::Stub::PrepareAsyncnewNodeNotifyRaw(::grpc::ClientContext* context, const ::pf_gossip::GossipNodeInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::pf_gossip::updateResult, ::pf_gossip::GossipNodeInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_newNodeNotify_, context, request);
}

::grpc::ClientAsyncResponseReader< ::pf_gossip::updateResult>* Gossip::Stub::AsyncnewNodeNotifyRaw(::grpc::ClientContext* context, const ::pf_gossip::GossipNodeInfo& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncnewNodeNotifyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Gossip::Stub::deleteNodeNotify(::grpc::ClientContext* context, const ::pf_gossip::GossipNodeInfo& request, ::pf_gossip::updateResult* response) {
  return ::grpc::internal::BlockingUnaryCall< ::pf_gossip::GossipNodeInfo, ::pf_gossip::updateResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_deleteNodeNotify_, context, request, response);
}

void Gossip::Stub::async::deleteNodeNotify(::grpc::ClientContext* context, const ::pf_gossip::GossipNodeInfo* request, ::pf_gossip::updateResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::pf_gossip::GossipNodeInfo, ::pf_gossip::updateResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_deleteNodeNotify_, context, request, response, std::move(f));
}

void Gossip::Stub::async::deleteNodeNotify(::grpc::ClientContext* context, const ::pf_gossip::GossipNodeInfo* request, ::pf_gossip::updateResult* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_deleteNodeNotify_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::pf_gossip::updateResult>* Gossip::Stub::PrepareAsyncdeleteNodeNotifyRaw(::grpc::ClientContext* context, const ::pf_gossip::GossipNodeInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::pf_gossip::updateResult, ::pf_gossip::GossipNodeInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_deleteNodeNotify_, context, request);
}

::grpc::ClientAsyncResponseReader< ::pf_gossip::updateResult>* Gossip::Stub::AsyncdeleteNodeNotifyRaw(::grpc::ClientContext* context, const ::pf_gossip::GossipNodeInfo& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncdeleteNodeNotifyRaw(context, request, cq);
  result->StartCall();
  return result;
}

Gossip::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Gossip_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Gossip::Service, ::pf_gossip::Message, ::pf_gossip::SearchResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Gossip::Service* service,
             ::grpc::ServerContext* ctx,
             const ::pf_gossip::Message* req,
             ::pf_gossip::SearchResult* resp) {
               return service->search(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Gossip_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Gossip::Service, ::pf_gossip::SlotUpdate, ::pf_gossip::updateResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Gossip::Service* service,
             ::grpc::ServerContext* ctx,
             const ::pf_gossip::SlotUpdate* req,
             ::pf_gossip::updateResult* resp) {
               return service->pull(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Gossip_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Gossip::Service, ::pf_gossip::Message, ::pf_gossip::Message, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Gossip::Service* service,
             ::grpc::ServerContext* ctx,
             const ::pf_gossip::Message* req,
             ::pf_gossip::Message* resp) {
               return service->echo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Gossip_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Gossip::Service, ::pf_gossip::GossipNodeInfo, ::pf_gossip::GossipNodeInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Gossip::Service* service,
             ::grpc::ServerContext* ctx,
             const ::pf_gossip::GossipNodeInfo* req,
             ::pf_gossip::GossipNodeInfo* resp) {
               return service->EstablishConnection(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Gossip_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Gossip::Service, ::pf_gossip::NodeVersions, ::pf_gossip::NodeVersions, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Gossip::Service* service,
             ::grpc::ServerContext* ctx,
             const ::pf_gossip::NodeVersions* req,
             ::pf_gossip::NodeVersions* resp) {
               return service->heartBeat(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Gossip_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Gossip::Service, ::pf_gossip::GossipNodeInfo, ::pf_gossip::updateResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Gossip::Service* service,
             ::grpc::ServerContext* ctx,
             const ::pf_gossip::GossipNodeInfo* req,
             ::pf_gossip::updateResult* resp) {
               return service->newNodeNotify(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Gossip_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Gossip::Service, ::pf_gossip::GossipNodeInfo, ::pf_gossip::updateResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Gossip::Service* service,
             ::grpc::ServerContext* ctx,
             const ::pf_gossip::GossipNodeInfo* req,
             ::pf_gossip::updateResult* resp) {
               return service->deleteNodeNotify(ctx, req, resp);
             }, this)));
}

Gossip::Service::~Service() {
}

::grpc::Status Gossip::Service::search(::grpc::ServerContext* context, const ::pf_gossip::Message* request, ::pf_gossip::SearchResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Gossip::Service::pull(::grpc::ServerContext* context, const ::pf_gossip::SlotUpdate* request, ::pf_gossip::updateResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Gossip::Service::echo(::grpc::ServerContext* context, const ::pf_gossip::Message* request, ::pf_gossip::Message* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Gossip::Service::EstablishConnection(::grpc::ServerContext* context, const ::pf_gossip::GossipNodeInfo* request, ::pf_gossip::GossipNodeInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Gossip::Service::heartBeat(::grpc::ServerContext* context, const ::pf_gossip::NodeVersions* request, ::pf_gossip::NodeVersions* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Gossip::Service::newNodeNotify(::grpc::ServerContext* context, const ::pf_gossip::GossipNodeInfo* request, ::pf_gossip::updateResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Gossip::Service::deleteNodeNotify(::grpc::ServerContext* context, const ::pf_gossip::GossipNodeInfo* request, ::pf_gossip::updateResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace pf_gossip

