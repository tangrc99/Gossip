// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: Gossip.proto
#ifndef GRPC_Gossip_2eproto__INCLUDED
#define GRPC_Gossip_2eproto__INCLUDED

#include "Gossip.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace pf_gossip {

class Gossip final {
 public:
  static constexpr char const* service_full_name() {
    return "pf_gossip.Gossip";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // gossip节点内部数据库接口
    virtual ::grpc::Status search(::grpc::ClientContext* context, const ::pf_gossip::Message& request, ::pf_gossip::SearchResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pf_gossip::SearchResult>> Asyncsearch(::grpc::ClientContext* context, const ::pf_gossip::Message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pf_gossip::SearchResult>>(AsyncsearchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pf_gossip::SearchResult>> PrepareAsyncsearch(::grpc::ClientContext* context, const ::pf_gossip::Message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pf_gossip::SearchResult>>(PrepareAsyncsearchRaw(context, request, cq));
    }
    // 分布式搜索，遍历节点并且保证最新版本
    virtual ::grpc::Status pull(::grpc::ClientContext* context, const ::pf_gossip::SlotUpdate& request, ::pf_gossip::updateResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pf_gossip::updateResult>> Asyncpull(::grpc::ClientContext* context, const ::pf_gossip::SlotUpdate& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pf_gossip::updateResult>>(AsyncpullRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pf_gossip::updateResult>> PrepareAsyncpull(::grpc::ClientContext* context, const ::pf_gossip::SlotUpdate& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pf_gossip::updateResult>>(PrepareAsyncpullRaw(context, request, cq));
    }
    // 向对方发送部分slot的信息
    virtual ::grpc::Status echo(::grpc::ClientContext* context, const ::pf_gossip::Message& request, ::pf_gossip::Message* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pf_gossip::Message>> Asyncecho(::grpc::ClientContext* context, const ::pf_gossip::Message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pf_gossip::Message>>(AsyncechoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pf_gossip::Message>> PrepareAsyncecho(::grpc::ClientContext* context, const ::pf_gossip::Message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pf_gossip::Message>>(PrepareAsyncechoRaw(context, request, cq));
    }
    // gossip节点状态接口
    virtual ::grpc::Status EstablishConnection(::grpc::ClientContext* context, const ::pf_gossip::GossipNodeInfo& request, ::pf_gossip::GossipNodeInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pf_gossip::GossipNodeInfo>> AsyncEstablishConnection(::grpc::ClientContext* context, const ::pf_gossip::GossipNodeInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pf_gossip::GossipNodeInfo>>(AsyncEstablishConnectionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pf_gossip::GossipNodeInfo>> PrepareAsyncEstablishConnection(::grpc::ClientContext* context, const ::pf_gossip::GossipNodeInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pf_gossip::GossipNodeInfo>>(PrepareAsyncEstablishConnectionRaw(context, request, cq));
    }
    virtual ::grpc::Status heartBeat(::grpc::ClientContext* context, const ::pf_gossip::NodeVersions& request, ::pf_gossip::NodeVersions* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pf_gossip::NodeVersions>> AsyncheartBeat(::grpc::ClientContext* context, const ::pf_gossip::NodeVersions& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pf_gossip::NodeVersions>>(AsyncheartBeatRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pf_gossip::NodeVersions>> PrepareAsyncheartBeat(::grpc::ClientContext* context, const ::pf_gossip::NodeVersions& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pf_gossip::NodeVersions>>(PrepareAsyncheartBeatRaw(context, request, cq));
    }
    // 应用层心跳，并且检查各个节点的版本，方便pull操作
    virtual ::grpc::Status newNodeNotify(::grpc::ClientContext* context, const ::pf_gossip::GossipNodeInfo& request, ::pf_gossip::updateResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pf_gossip::updateResult>> AsyncnewNodeNotify(::grpc::ClientContext* context, const ::pf_gossip::GossipNodeInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pf_gossip::updateResult>>(AsyncnewNodeNotifyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pf_gossip::updateResult>> PrepareAsyncnewNodeNotify(::grpc::ClientContext* context, const ::pf_gossip::GossipNodeInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pf_gossip::updateResult>>(PrepareAsyncnewNodeNotifyRaw(context, request, cq));
    }
    // 理论上这个是不需要回包信息的
    virtual ::grpc::Status deleteNodeNotify(::grpc::ClientContext* context, const ::pf_gossip::GossipNodeInfo& request, ::pf_gossip::updateResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pf_gossip::updateResult>> AsyncdeleteNodeNotify(::grpc::ClientContext* context, const ::pf_gossip::GossipNodeInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pf_gossip::updateResult>>(AsyncdeleteNodeNotifyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pf_gossip::updateResult>> PrepareAsyncdeleteNodeNotify(::grpc::ClientContext* context, const ::pf_gossip::GossipNodeInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pf_gossip::updateResult>>(PrepareAsyncdeleteNodeNotifyRaw(context, request, cq));
    }
    // 理论上这个是不需要回包信息的
    class async_interface {
     public:
      virtual ~async_interface() {}
      // gossip节点内部数据库接口
      virtual void search(::grpc::ClientContext* context, const ::pf_gossip::Message* request, ::pf_gossip::SearchResult* response, std::function<void(::grpc::Status)>) = 0;
      virtual void search(::grpc::ClientContext* context, const ::pf_gossip::Message* request, ::pf_gossip::SearchResult* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // 分布式搜索，遍历节点并且保证最新版本
      virtual void pull(::grpc::ClientContext* context, const ::pf_gossip::SlotUpdate* request, ::pf_gossip::updateResult* response, std::function<void(::grpc::Status)>) = 0;
      virtual void pull(::grpc::ClientContext* context, const ::pf_gossip::SlotUpdate* request, ::pf_gossip::updateResult* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // 向对方发送部分slot的信息
      virtual void echo(::grpc::ClientContext* context, const ::pf_gossip::Message* request, ::pf_gossip::Message* response, std::function<void(::grpc::Status)>) = 0;
      virtual void echo(::grpc::ClientContext* context, const ::pf_gossip::Message* request, ::pf_gossip::Message* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // gossip节点状态接口
      virtual void EstablishConnection(::grpc::ClientContext* context, const ::pf_gossip::GossipNodeInfo* request, ::pf_gossip::GossipNodeInfo* response, std::function<void(::grpc::Status)>) = 0;
      virtual void EstablishConnection(::grpc::ClientContext* context, const ::pf_gossip::GossipNodeInfo* request, ::pf_gossip::GossipNodeInfo* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void heartBeat(::grpc::ClientContext* context, const ::pf_gossip::NodeVersions* request, ::pf_gossip::NodeVersions* response, std::function<void(::grpc::Status)>) = 0;
      virtual void heartBeat(::grpc::ClientContext* context, const ::pf_gossip::NodeVersions* request, ::pf_gossip::NodeVersions* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // 应用层心跳，并且检查各个节点的版本，方便pull操作
      virtual void newNodeNotify(::grpc::ClientContext* context, const ::pf_gossip::GossipNodeInfo* request, ::pf_gossip::updateResult* response, std::function<void(::grpc::Status)>) = 0;
      virtual void newNodeNotify(::grpc::ClientContext* context, const ::pf_gossip::GossipNodeInfo* request, ::pf_gossip::updateResult* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // 理论上这个是不需要回包信息的
      virtual void deleteNodeNotify(::grpc::ClientContext* context, const ::pf_gossip::GossipNodeInfo* request, ::pf_gossip::updateResult* response, std::function<void(::grpc::Status)>) = 0;
      virtual void deleteNodeNotify(::grpc::ClientContext* context, const ::pf_gossip::GossipNodeInfo* request, ::pf_gossip::updateResult* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // 理论上这个是不需要回包信息的
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pf_gossip::SearchResult>* AsyncsearchRaw(::grpc::ClientContext* context, const ::pf_gossip::Message& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pf_gossip::SearchResult>* PrepareAsyncsearchRaw(::grpc::ClientContext* context, const ::pf_gossip::Message& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pf_gossip::updateResult>* AsyncpullRaw(::grpc::ClientContext* context, const ::pf_gossip::SlotUpdate& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pf_gossip::updateResult>* PrepareAsyncpullRaw(::grpc::ClientContext* context, const ::pf_gossip::SlotUpdate& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pf_gossip::Message>* AsyncechoRaw(::grpc::ClientContext* context, const ::pf_gossip::Message& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pf_gossip::Message>* PrepareAsyncechoRaw(::grpc::ClientContext* context, const ::pf_gossip::Message& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pf_gossip::GossipNodeInfo>* AsyncEstablishConnectionRaw(::grpc::ClientContext* context, const ::pf_gossip::GossipNodeInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pf_gossip::GossipNodeInfo>* PrepareAsyncEstablishConnectionRaw(::grpc::ClientContext* context, const ::pf_gossip::GossipNodeInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pf_gossip::NodeVersions>* AsyncheartBeatRaw(::grpc::ClientContext* context, const ::pf_gossip::NodeVersions& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pf_gossip::NodeVersions>* PrepareAsyncheartBeatRaw(::grpc::ClientContext* context, const ::pf_gossip::NodeVersions& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pf_gossip::updateResult>* AsyncnewNodeNotifyRaw(::grpc::ClientContext* context, const ::pf_gossip::GossipNodeInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pf_gossip::updateResult>* PrepareAsyncnewNodeNotifyRaw(::grpc::ClientContext* context, const ::pf_gossip::GossipNodeInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pf_gossip::updateResult>* AsyncdeleteNodeNotifyRaw(::grpc::ClientContext* context, const ::pf_gossip::GossipNodeInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pf_gossip::updateResult>* PrepareAsyncdeleteNodeNotifyRaw(::grpc::ClientContext* context, const ::pf_gossip::GossipNodeInfo& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status search(::grpc::ClientContext* context, const ::pf_gossip::Message& request, ::pf_gossip::SearchResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pf_gossip::SearchResult>> Asyncsearch(::grpc::ClientContext* context, const ::pf_gossip::Message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pf_gossip::SearchResult>>(AsyncsearchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pf_gossip::SearchResult>> PrepareAsyncsearch(::grpc::ClientContext* context, const ::pf_gossip::Message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pf_gossip::SearchResult>>(PrepareAsyncsearchRaw(context, request, cq));
    }
    ::grpc::Status pull(::grpc::ClientContext* context, const ::pf_gossip::SlotUpdate& request, ::pf_gossip::updateResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pf_gossip::updateResult>> Asyncpull(::grpc::ClientContext* context, const ::pf_gossip::SlotUpdate& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pf_gossip::updateResult>>(AsyncpullRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pf_gossip::updateResult>> PrepareAsyncpull(::grpc::ClientContext* context, const ::pf_gossip::SlotUpdate& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pf_gossip::updateResult>>(PrepareAsyncpullRaw(context, request, cq));
    }
    ::grpc::Status echo(::grpc::ClientContext* context, const ::pf_gossip::Message& request, ::pf_gossip::Message* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pf_gossip::Message>> Asyncecho(::grpc::ClientContext* context, const ::pf_gossip::Message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pf_gossip::Message>>(AsyncechoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pf_gossip::Message>> PrepareAsyncecho(::grpc::ClientContext* context, const ::pf_gossip::Message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pf_gossip::Message>>(PrepareAsyncechoRaw(context, request, cq));
    }
    ::grpc::Status EstablishConnection(::grpc::ClientContext* context, const ::pf_gossip::GossipNodeInfo& request, ::pf_gossip::GossipNodeInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pf_gossip::GossipNodeInfo>> AsyncEstablishConnection(::grpc::ClientContext* context, const ::pf_gossip::GossipNodeInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pf_gossip::GossipNodeInfo>>(AsyncEstablishConnectionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pf_gossip::GossipNodeInfo>> PrepareAsyncEstablishConnection(::grpc::ClientContext* context, const ::pf_gossip::GossipNodeInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pf_gossip::GossipNodeInfo>>(PrepareAsyncEstablishConnectionRaw(context, request, cq));
    }
    ::grpc::Status heartBeat(::grpc::ClientContext* context, const ::pf_gossip::NodeVersions& request, ::pf_gossip::NodeVersions* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pf_gossip::NodeVersions>> AsyncheartBeat(::grpc::ClientContext* context, const ::pf_gossip::NodeVersions& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pf_gossip::NodeVersions>>(AsyncheartBeatRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pf_gossip::NodeVersions>> PrepareAsyncheartBeat(::grpc::ClientContext* context, const ::pf_gossip::NodeVersions& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pf_gossip::NodeVersions>>(PrepareAsyncheartBeatRaw(context, request, cq));
    }
    ::grpc::Status newNodeNotify(::grpc::ClientContext* context, const ::pf_gossip::GossipNodeInfo& request, ::pf_gossip::updateResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pf_gossip::updateResult>> AsyncnewNodeNotify(::grpc::ClientContext* context, const ::pf_gossip::GossipNodeInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pf_gossip::updateResult>>(AsyncnewNodeNotifyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pf_gossip::updateResult>> PrepareAsyncnewNodeNotify(::grpc::ClientContext* context, const ::pf_gossip::GossipNodeInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pf_gossip::updateResult>>(PrepareAsyncnewNodeNotifyRaw(context, request, cq));
    }
    ::grpc::Status deleteNodeNotify(::grpc::ClientContext* context, const ::pf_gossip::GossipNodeInfo& request, ::pf_gossip::updateResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pf_gossip::updateResult>> AsyncdeleteNodeNotify(::grpc::ClientContext* context, const ::pf_gossip::GossipNodeInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pf_gossip::updateResult>>(AsyncdeleteNodeNotifyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pf_gossip::updateResult>> PrepareAsyncdeleteNodeNotify(::grpc::ClientContext* context, const ::pf_gossip::GossipNodeInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pf_gossip::updateResult>>(PrepareAsyncdeleteNodeNotifyRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void search(::grpc::ClientContext* context, const ::pf_gossip::Message* request, ::pf_gossip::SearchResult* response, std::function<void(::grpc::Status)>) override;
      void search(::grpc::ClientContext* context, const ::pf_gossip::Message* request, ::pf_gossip::SearchResult* response, ::grpc::ClientUnaryReactor* reactor) override;
      void pull(::grpc::ClientContext* context, const ::pf_gossip::SlotUpdate* request, ::pf_gossip::updateResult* response, std::function<void(::grpc::Status)>) override;
      void pull(::grpc::ClientContext* context, const ::pf_gossip::SlotUpdate* request, ::pf_gossip::updateResult* response, ::grpc::ClientUnaryReactor* reactor) override;
      void echo(::grpc::ClientContext* context, const ::pf_gossip::Message* request, ::pf_gossip::Message* response, std::function<void(::grpc::Status)>) override;
      void echo(::grpc::ClientContext* context, const ::pf_gossip::Message* request, ::pf_gossip::Message* response, ::grpc::ClientUnaryReactor* reactor) override;
      void EstablishConnection(::grpc::ClientContext* context, const ::pf_gossip::GossipNodeInfo* request, ::pf_gossip::GossipNodeInfo* response, std::function<void(::grpc::Status)>) override;
      void EstablishConnection(::grpc::ClientContext* context, const ::pf_gossip::GossipNodeInfo* request, ::pf_gossip::GossipNodeInfo* response, ::grpc::ClientUnaryReactor* reactor) override;
      void heartBeat(::grpc::ClientContext* context, const ::pf_gossip::NodeVersions* request, ::pf_gossip::NodeVersions* response, std::function<void(::grpc::Status)>) override;
      void heartBeat(::grpc::ClientContext* context, const ::pf_gossip::NodeVersions* request, ::pf_gossip::NodeVersions* response, ::grpc::ClientUnaryReactor* reactor) override;
      void newNodeNotify(::grpc::ClientContext* context, const ::pf_gossip::GossipNodeInfo* request, ::pf_gossip::updateResult* response, std::function<void(::grpc::Status)>) override;
      void newNodeNotify(::grpc::ClientContext* context, const ::pf_gossip::GossipNodeInfo* request, ::pf_gossip::updateResult* response, ::grpc::ClientUnaryReactor* reactor) override;
      void deleteNodeNotify(::grpc::ClientContext* context, const ::pf_gossip::GossipNodeInfo* request, ::pf_gossip::updateResult* response, std::function<void(::grpc::Status)>) override;
      void deleteNodeNotify(::grpc::ClientContext* context, const ::pf_gossip::GossipNodeInfo* request, ::pf_gossip::updateResult* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::pf_gossip::SearchResult>* AsyncsearchRaw(::grpc::ClientContext* context, const ::pf_gossip::Message& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pf_gossip::SearchResult>* PrepareAsyncsearchRaw(::grpc::ClientContext* context, const ::pf_gossip::Message& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pf_gossip::updateResult>* AsyncpullRaw(::grpc::ClientContext* context, const ::pf_gossip::SlotUpdate& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pf_gossip::updateResult>* PrepareAsyncpullRaw(::grpc::ClientContext* context, const ::pf_gossip::SlotUpdate& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pf_gossip::Message>* AsyncechoRaw(::grpc::ClientContext* context, const ::pf_gossip::Message& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pf_gossip::Message>* PrepareAsyncechoRaw(::grpc::ClientContext* context, const ::pf_gossip::Message& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pf_gossip::GossipNodeInfo>* AsyncEstablishConnectionRaw(::grpc::ClientContext* context, const ::pf_gossip::GossipNodeInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pf_gossip::GossipNodeInfo>* PrepareAsyncEstablishConnectionRaw(::grpc::ClientContext* context, const ::pf_gossip::GossipNodeInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pf_gossip::NodeVersions>* AsyncheartBeatRaw(::grpc::ClientContext* context, const ::pf_gossip::NodeVersions& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pf_gossip::NodeVersions>* PrepareAsyncheartBeatRaw(::grpc::ClientContext* context, const ::pf_gossip::NodeVersions& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pf_gossip::updateResult>* AsyncnewNodeNotifyRaw(::grpc::ClientContext* context, const ::pf_gossip::GossipNodeInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pf_gossip::updateResult>* PrepareAsyncnewNodeNotifyRaw(::grpc::ClientContext* context, const ::pf_gossip::GossipNodeInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pf_gossip::updateResult>* AsyncdeleteNodeNotifyRaw(::grpc::ClientContext* context, const ::pf_gossip::GossipNodeInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pf_gossip::updateResult>* PrepareAsyncdeleteNodeNotifyRaw(::grpc::ClientContext* context, const ::pf_gossip::GossipNodeInfo& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_search_;
    const ::grpc::internal::RpcMethod rpcmethod_pull_;
    const ::grpc::internal::RpcMethod rpcmethod_echo_;
    const ::grpc::internal::RpcMethod rpcmethod_EstablishConnection_;
    const ::grpc::internal::RpcMethod rpcmethod_heartBeat_;
    const ::grpc::internal::RpcMethod rpcmethod_newNodeNotify_;
    const ::grpc::internal::RpcMethod rpcmethod_deleteNodeNotify_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // gossip节点内部数据库接口
    virtual ::grpc::Status search(::grpc::ServerContext* context, const ::pf_gossip::Message* request, ::pf_gossip::SearchResult* response);
    // 分布式搜索，遍历节点并且保证最新版本
    virtual ::grpc::Status pull(::grpc::ServerContext* context, const ::pf_gossip::SlotUpdate* request, ::pf_gossip::updateResult* response);
    // 向对方发送部分slot的信息
    virtual ::grpc::Status echo(::grpc::ServerContext* context, const ::pf_gossip::Message* request, ::pf_gossip::Message* response);
    // gossip节点状态接口
    virtual ::grpc::Status EstablishConnection(::grpc::ServerContext* context, const ::pf_gossip::GossipNodeInfo* request, ::pf_gossip::GossipNodeInfo* response);
    virtual ::grpc::Status heartBeat(::grpc::ServerContext* context, const ::pf_gossip::NodeVersions* request, ::pf_gossip::NodeVersions* response);
    // 应用层心跳，并且检查各个节点的版本，方便pull操作
    virtual ::grpc::Status newNodeNotify(::grpc::ServerContext* context, const ::pf_gossip::GossipNodeInfo* request, ::pf_gossip::updateResult* response);
    // 理论上这个是不需要回包信息的
    virtual ::grpc::Status deleteNodeNotify(::grpc::ServerContext* context, const ::pf_gossip::GossipNodeInfo* request, ::pf_gossip::updateResult* response);
    // 理论上这个是不需要回包信息的
  };
  template <class BaseClass>
  class WithAsyncMethod_search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_search() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status search(::grpc::ServerContext* /*context*/, const ::pf_gossip::Message* /*request*/, ::pf_gossip::SearchResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestsearch(::grpc::ServerContext* context, ::pf_gossip::Message* request, ::grpc::ServerAsyncResponseWriter< ::pf_gossip::SearchResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_pull : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_pull() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_pull() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status pull(::grpc::ServerContext* /*context*/, const ::pf_gossip::SlotUpdate* /*request*/, ::pf_gossip::updateResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestpull(::grpc::ServerContext* context, ::pf_gossip::SlotUpdate* request, ::grpc::ServerAsyncResponseWriter< ::pf_gossip::updateResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_echo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_echo() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_echo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status echo(::grpc::ServerContext* /*context*/, const ::pf_gossip::Message* /*request*/, ::pf_gossip::Message* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestecho(::grpc::ServerContext* context, ::pf_gossip::Message* request, ::grpc::ServerAsyncResponseWriter< ::pf_gossip::Message>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_EstablishConnection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_EstablishConnection() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_EstablishConnection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EstablishConnection(::grpc::ServerContext* /*context*/, const ::pf_gossip::GossipNodeInfo* /*request*/, ::pf_gossip::GossipNodeInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEstablishConnection(::grpc::ServerContext* context, ::pf_gossip::GossipNodeInfo* request, ::grpc::ServerAsyncResponseWriter< ::pf_gossip::GossipNodeInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_heartBeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_heartBeat() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_heartBeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status heartBeat(::grpc::ServerContext* /*context*/, const ::pf_gossip::NodeVersions* /*request*/, ::pf_gossip::NodeVersions* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestheartBeat(::grpc::ServerContext* context, ::pf_gossip::NodeVersions* request, ::grpc::ServerAsyncResponseWriter< ::pf_gossip::NodeVersions>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_newNodeNotify : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_newNodeNotify() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_newNodeNotify() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status newNodeNotify(::grpc::ServerContext* /*context*/, const ::pf_gossip::GossipNodeInfo* /*request*/, ::pf_gossip::updateResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestnewNodeNotify(::grpc::ServerContext* context, ::pf_gossip::GossipNodeInfo* request, ::grpc::ServerAsyncResponseWriter< ::pf_gossip::updateResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_deleteNodeNotify : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_deleteNodeNotify() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_deleteNodeNotify() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteNodeNotify(::grpc::ServerContext* /*context*/, const ::pf_gossip::GossipNodeInfo* /*request*/, ::pf_gossip::updateResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdeleteNodeNotify(::grpc::ServerContext* context, ::pf_gossip::GossipNodeInfo* request, ::grpc::ServerAsyncResponseWriter< ::pf_gossip::updateResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_search<WithAsyncMethod_pull<WithAsyncMethod_echo<WithAsyncMethod_EstablishConnection<WithAsyncMethod_heartBeat<WithAsyncMethod_newNodeNotify<WithAsyncMethod_deleteNodeNotify<Service > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_search() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::pf_gossip::Message, ::pf_gossip::SearchResult>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::pf_gossip::Message* request, ::pf_gossip::SearchResult* response) { return this->search(context, request, response); }));}
    void SetMessageAllocatorFor_search(
        ::grpc::MessageAllocator< ::pf_gossip::Message, ::pf_gossip::SearchResult>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::pf_gossip::Message, ::pf_gossip::SearchResult>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status search(::grpc::ServerContext* /*context*/, const ::pf_gossip::Message* /*request*/, ::pf_gossip::SearchResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* search(
      ::grpc::CallbackServerContext* /*context*/, const ::pf_gossip::Message* /*request*/, ::pf_gossip::SearchResult* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_pull : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_pull() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::pf_gossip::SlotUpdate, ::pf_gossip::updateResult>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::pf_gossip::SlotUpdate* request, ::pf_gossip::updateResult* response) { return this->pull(context, request, response); }));}
    void SetMessageAllocatorFor_pull(
        ::grpc::MessageAllocator< ::pf_gossip::SlotUpdate, ::pf_gossip::updateResult>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::pf_gossip::SlotUpdate, ::pf_gossip::updateResult>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_pull() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status pull(::grpc::ServerContext* /*context*/, const ::pf_gossip::SlotUpdate* /*request*/, ::pf_gossip::updateResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* pull(
      ::grpc::CallbackServerContext* /*context*/, const ::pf_gossip::SlotUpdate* /*request*/, ::pf_gossip::updateResult* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_echo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_echo() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::pf_gossip::Message, ::pf_gossip::Message>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::pf_gossip::Message* request, ::pf_gossip::Message* response) { return this->echo(context, request, response); }));}
    void SetMessageAllocatorFor_echo(
        ::grpc::MessageAllocator< ::pf_gossip::Message, ::pf_gossip::Message>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::pf_gossip::Message, ::pf_gossip::Message>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_echo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status echo(::grpc::ServerContext* /*context*/, const ::pf_gossip::Message* /*request*/, ::pf_gossip::Message* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* echo(
      ::grpc::CallbackServerContext* /*context*/, const ::pf_gossip::Message* /*request*/, ::pf_gossip::Message* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_EstablishConnection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_EstablishConnection() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::pf_gossip::GossipNodeInfo, ::pf_gossip::GossipNodeInfo>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::pf_gossip::GossipNodeInfo* request, ::pf_gossip::GossipNodeInfo* response) { return this->EstablishConnection(context, request, response); }));}
    void SetMessageAllocatorFor_EstablishConnection(
        ::grpc::MessageAllocator< ::pf_gossip::GossipNodeInfo, ::pf_gossip::GossipNodeInfo>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::pf_gossip::GossipNodeInfo, ::pf_gossip::GossipNodeInfo>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_EstablishConnection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EstablishConnection(::grpc::ServerContext* /*context*/, const ::pf_gossip::GossipNodeInfo* /*request*/, ::pf_gossip::GossipNodeInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* EstablishConnection(
      ::grpc::CallbackServerContext* /*context*/, const ::pf_gossip::GossipNodeInfo* /*request*/, ::pf_gossip::GossipNodeInfo* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_heartBeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_heartBeat() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::pf_gossip::NodeVersions, ::pf_gossip::NodeVersions>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::pf_gossip::NodeVersions* request, ::pf_gossip::NodeVersions* response) { return this->heartBeat(context, request, response); }));}
    void SetMessageAllocatorFor_heartBeat(
        ::grpc::MessageAllocator< ::pf_gossip::NodeVersions, ::pf_gossip::NodeVersions>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::pf_gossip::NodeVersions, ::pf_gossip::NodeVersions>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_heartBeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status heartBeat(::grpc::ServerContext* /*context*/, const ::pf_gossip::NodeVersions* /*request*/, ::pf_gossip::NodeVersions* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* heartBeat(
      ::grpc::CallbackServerContext* /*context*/, const ::pf_gossip::NodeVersions* /*request*/, ::pf_gossip::NodeVersions* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_newNodeNotify : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_newNodeNotify() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::pf_gossip::GossipNodeInfo, ::pf_gossip::updateResult>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::pf_gossip::GossipNodeInfo* request, ::pf_gossip::updateResult* response) { return this->newNodeNotify(context, request, response); }));}
    void SetMessageAllocatorFor_newNodeNotify(
        ::grpc::MessageAllocator< ::pf_gossip::GossipNodeInfo, ::pf_gossip::updateResult>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::pf_gossip::GossipNodeInfo, ::pf_gossip::updateResult>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_newNodeNotify() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status newNodeNotify(::grpc::ServerContext* /*context*/, const ::pf_gossip::GossipNodeInfo* /*request*/, ::pf_gossip::updateResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* newNodeNotify(
      ::grpc::CallbackServerContext* /*context*/, const ::pf_gossip::GossipNodeInfo* /*request*/, ::pf_gossip::updateResult* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_deleteNodeNotify : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_deleteNodeNotify() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::pf_gossip::GossipNodeInfo, ::pf_gossip::updateResult>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::pf_gossip::GossipNodeInfo* request, ::pf_gossip::updateResult* response) { return this->deleteNodeNotify(context, request, response); }));}
    void SetMessageAllocatorFor_deleteNodeNotify(
        ::grpc::MessageAllocator< ::pf_gossip::GossipNodeInfo, ::pf_gossip::updateResult>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::pf_gossip::GossipNodeInfo, ::pf_gossip::updateResult>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_deleteNodeNotify() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteNodeNotify(::grpc::ServerContext* /*context*/, const ::pf_gossip::GossipNodeInfo* /*request*/, ::pf_gossip::updateResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* deleteNodeNotify(
      ::grpc::CallbackServerContext* /*context*/, const ::pf_gossip::GossipNodeInfo* /*request*/, ::pf_gossip::updateResult* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_search<WithCallbackMethod_pull<WithCallbackMethod_echo<WithCallbackMethod_EstablishConnection<WithCallbackMethod_heartBeat<WithCallbackMethod_newNodeNotify<WithCallbackMethod_deleteNodeNotify<Service > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_search() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status search(::grpc::ServerContext* /*context*/, const ::pf_gossip::Message* /*request*/, ::pf_gossip::SearchResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_pull : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_pull() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_pull() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status pull(::grpc::ServerContext* /*context*/, const ::pf_gossip::SlotUpdate* /*request*/, ::pf_gossip::updateResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_echo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_echo() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_echo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status echo(::grpc::ServerContext* /*context*/, const ::pf_gossip::Message* /*request*/, ::pf_gossip::Message* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_EstablishConnection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_EstablishConnection() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_EstablishConnection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EstablishConnection(::grpc::ServerContext* /*context*/, const ::pf_gossip::GossipNodeInfo* /*request*/, ::pf_gossip::GossipNodeInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_heartBeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_heartBeat() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_heartBeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status heartBeat(::grpc::ServerContext* /*context*/, const ::pf_gossip::NodeVersions* /*request*/, ::pf_gossip::NodeVersions* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_newNodeNotify : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_newNodeNotify() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_newNodeNotify() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status newNodeNotify(::grpc::ServerContext* /*context*/, const ::pf_gossip::GossipNodeInfo* /*request*/, ::pf_gossip::updateResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_deleteNodeNotify : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_deleteNodeNotify() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_deleteNodeNotify() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteNodeNotify(::grpc::ServerContext* /*context*/, const ::pf_gossip::GossipNodeInfo* /*request*/, ::pf_gossip::updateResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_search() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status search(::grpc::ServerContext* /*context*/, const ::pf_gossip::Message* /*request*/, ::pf_gossip::SearchResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestsearch(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_pull : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_pull() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_pull() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status pull(::grpc::ServerContext* /*context*/, const ::pf_gossip::SlotUpdate* /*request*/, ::pf_gossip::updateResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestpull(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_echo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_echo() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_echo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status echo(::grpc::ServerContext* /*context*/, const ::pf_gossip::Message* /*request*/, ::pf_gossip::Message* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestecho(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_EstablishConnection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_EstablishConnection() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_EstablishConnection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EstablishConnection(::grpc::ServerContext* /*context*/, const ::pf_gossip::GossipNodeInfo* /*request*/, ::pf_gossip::GossipNodeInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEstablishConnection(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_heartBeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_heartBeat() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_heartBeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status heartBeat(::grpc::ServerContext* /*context*/, const ::pf_gossip::NodeVersions* /*request*/, ::pf_gossip::NodeVersions* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestheartBeat(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_newNodeNotify : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_newNodeNotify() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_newNodeNotify() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status newNodeNotify(::grpc::ServerContext* /*context*/, const ::pf_gossip::GossipNodeInfo* /*request*/, ::pf_gossip::updateResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestnewNodeNotify(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_deleteNodeNotify : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_deleteNodeNotify() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_deleteNodeNotify() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteNodeNotify(::grpc::ServerContext* /*context*/, const ::pf_gossip::GossipNodeInfo* /*request*/, ::pf_gossip::updateResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdeleteNodeNotify(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_search() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->search(context, request, response); }));
    }
    ~WithRawCallbackMethod_search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status search(::grpc::ServerContext* /*context*/, const ::pf_gossip::Message* /*request*/, ::pf_gossip::SearchResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* search(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_pull : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_pull() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->pull(context, request, response); }));
    }
    ~WithRawCallbackMethod_pull() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status pull(::grpc::ServerContext* /*context*/, const ::pf_gossip::SlotUpdate* /*request*/, ::pf_gossip::updateResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* pull(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_echo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_echo() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->echo(context, request, response); }));
    }
    ~WithRawCallbackMethod_echo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status echo(::grpc::ServerContext* /*context*/, const ::pf_gossip::Message* /*request*/, ::pf_gossip::Message* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* echo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_EstablishConnection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_EstablishConnection() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->EstablishConnection(context, request, response); }));
    }
    ~WithRawCallbackMethod_EstablishConnection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EstablishConnection(::grpc::ServerContext* /*context*/, const ::pf_gossip::GossipNodeInfo* /*request*/, ::pf_gossip::GossipNodeInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* EstablishConnection(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_heartBeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_heartBeat() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->heartBeat(context, request, response); }));
    }
    ~WithRawCallbackMethod_heartBeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status heartBeat(::grpc::ServerContext* /*context*/, const ::pf_gossip::NodeVersions* /*request*/, ::pf_gossip::NodeVersions* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* heartBeat(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_newNodeNotify : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_newNodeNotify() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->newNodeNotify(context, request, response); }));
    }
    ~WithRawCallbackMethod_newNodeNotify() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status newNodeNotify(::grpc::ServerContext* /*context*/, const ::pf_gossip::GossipNodeInfo* /*request*/, ::pf_gossip::updateResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* newNodeNotify(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_deleteNodeNotify : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_deleteNodeNotify() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->deleteNodeNotify(context, request, response); }));
    }
    ~WithRawCallbackMethod_deleteNodeNotify() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteNodeNotify(::grpc::ServerContext* /*context*/, const ::pf_gossip::GossipNodeInfo* /*request*/, ::pf_gossip::updateResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* deleteNodeNotify(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_search() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::pf_gossip::Message, ::pf_gossip::SearchResult>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::pf_gossip::Message, ::pf_gossip::SearchResult>* streamer) {
                       return this->Streamedsearch(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status search(::grpc::ServerContext* /*context*/, const ::pf_gossip::Message* /*request*/, ::pf_gossip::SearchResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedsearch(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pf_gossip::Message,::pf_gossip::SearchResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_pull : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_pull() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::pf_gossip::SlotUpdate, ::pf_gossip::updateResult>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::pf_gossip::SlotUpdate, ::pf_gossip::updateResult>* streamer) {
                       return this->Streamedpull(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_pull() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status pull(::grpc::ServerContext* /*context*/, const ::pf_gossip::SlotUpdate* /*request*/, ::pf_gossip::updateResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedpull(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pf_gossip::SlotUpdate,::pf_gossip::updateResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_echo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_echo() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::pf_gossip::Message, ::pf_gossip::Message>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::pf_gossip::Message, ::pf_gossip::Message>* streamer) {
                       return this->Streamedecho(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_echo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status echo(::grpc::ServerContext* /*context*/, const ::pf_gossip::Message* /*request*/, ::pf_gossip::Message* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedecho(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pf_gossip::Message,::pf_gossip::Message>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_EstablishConnection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_EstablishConnection() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::pf_gossip::GossipNodeInfo, ::pf_gossip::GossipNodeInfo>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::pf_gossip::GossipNodeInfo, ::pf_gossip::GossipNodeInfo>* streamer) {
                       return this->StreamedEstablishConnection(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_EstablishConnection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status EstablishConnection(::grpc::ServerContext* /*context*/, const ::pf_gossip::GossipNodeInfo* /*request*/, ::pf_gossip::GossipNodeInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedEstablishConnection(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pf_gossip::GossipNodeInfo,::pf_gossip::GossipNodeInfo>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_heartBeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_heartBeat() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::pf_gossip::NodeVersions, ::pf_gossip::NodeVersions>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::pf_gossip::NodeVersions, ::pf_gossip::NodeVersions>* streamer) {
                       return this->StreamedheartBeat(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_heartBeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status heartBeat(::grpc::ServerContext* /*context*/, const ::pf_gossip::NodeVersions* /*request*/, ::pf_gossip::NodeVersions* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedheartBeat(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pf_gossip::NodeVersions,::pf_gossip::NodeVersions>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_newNodeNotify : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_newNodeNotify() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::pf_gossip::GossipNodeInfo, ::pf_gossip::updateResult>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::pf_gossip::GossipNodeInfo, ::pf_gossip::updateResult>* streamer) {
                       return this->StreamednewNodeNotify(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_newNodeNotify() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status newNodeNotify(::grpc::ServerContext* /*context*/, const ::pf_gossip::GossipNodeInfo* /*request*/, ::pf_gossip::updateResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamednewNodeNotify(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pf_gossip::GossipNodeInfo,::pf_gossip::updateResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_deleteNodeNotify : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_deleteNodeNotify() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::pf_gossip::GossipNodeInfo, ::pf_gossip::updateResult>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::pf_gossip::GossipNodeInfo, ::pf_gossip::updateResult>* streamer) {
                       return this->StreameddeleteNodeNotify(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_deleteNodeNotify() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status deleteNodeNotify(::grpc::ServerContext* /*context*/, const ::pf_gossip::GossipNodeInfo* /*request*/, ::pf_gossip::updateResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreameddeleteNodeNotify(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pf_gossip::GossipNodeInfo,::pf_gossip::updateResult>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_search<WithStreamedUnaryMethod_pull<WithStreamedUnaryMethod_echo<WithStreamedUnaryMethod_EstablishConnection<WithStreamedUnaryMethod_heartBeat<WithStreamedUnaryMethod_newNodeNotify<WithStreamedUnaryMethod_deleteNodeNotify<Service > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_search<WithStreamedUnaryMethod_pull<WithStreamedUnaryMethod_echo<WithStreamedUnaryMethod_EstablishConnection<WithStreamedUnaryMethod_heartBeat<WithStreamedUnaryMethod_newNodeNotify<WithStreamedUnaryMethod_deleteNodeNotify<Service > > > > > > > StreamedService;
};

}  // namespace pf_gossip


#endif  // GRPC_Gossip_2eproto__INCLUDED
