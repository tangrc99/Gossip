// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Gossip.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Gossip_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Gossip_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Gossip_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Gossip_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Gossip_2eproto;
namespace pf_gossip {
class GossipNodeInfo;
struct GossipNodeInfoDefaultTypeInternal;
extern GossipNodeInfoDefaultTypeInternal _GossipNodeInfo_default_instance_;
class Message;
struct MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
class NodeVersions;
struct NodeVersionsDefaultTypeInternal;
extern NodeVersionsDefaultTypeInternal _NodeVersions_default_instance_;
class SearchResult;
struct SearchResultDefaultTypeInternal;
extern SearchResultDefaultTypeInternal _SearchResult_default_instance_;
class SearchResult_Message;
struct SearchResult_MessageDefaultTypeInternal;
extern SearchResult_MessageDefaultTypeInternal _SearchResult_Message_default_instance_;
class SlotUpdate;
struct SlotUpdateDefaultTypeInternal;
extern SlotUpdateDefaultTypeInternal _SlotUpdate_default_instance_;
class updateResult;
struct updateResultDefaultTypeInternal;
extern updateResultDefaultTypeInternal _updateResult_default_instance_;
}  // namespace pf_gossip
PROTOBUF_NAMESPACE_OPEN
template<> ::pf_gossip::GossipNodeInfo* Arena::CreateMaybeMessage<::pf_gossip::GossipNodeInfo>(Arena*);
template<> ::pf_gossip::Message* Arena::CreateMaybeMessage<::pf_gossip::Message>(Arena*);
template<> ::pf_gossip::NodeVersions* Arena::CreateMaybeMessage<::pf_gossip::NodeVersions>(Arena*);
template<> ::pf_gossip::SearchResult* Arena::CreateMaybeMessage<::pf_gossip::SearchResult>(Arena*);
template<> ::pf_gossip::SearchResult_Message* Arena::CreateMaybeMessage<::pf_gossip::SearchResult_Message>(Arena*);
template<> ::pf_gossip::SlotUpdate* Arena::CreateMaybeMessage<::pf_gossip::SlotUpdate>(Arena*);
template<> ::pf_gossip::updateResult* Arena::CreateMaybeMessage<::pf_gossip::updateResult>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pf_gossip {

// ===================================================================

class Message final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pf_gossip.Message) */ {
 public:
  inline Message() : Message(nullptr) {}
  ~Message() override;
  explicit PROTOBUF_CONSTEXPR Message(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Message(const Message& from);
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message& operator=(Message&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }
  inline void Swap(Message* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Message>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Message& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Message& from) {
    Message::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pf_gossip.Message";
  }
  protected:
  explicit Message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string value = 2;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:pf_gossip.Message)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Gossip_2eproto;
};
// -------------------------------------------------------------------

class SearchResult_Message final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pf_gossip.SearchResult.Message) */ {
 public:
  inline SearchResult_Message() : SearchResult_Message(nullptr) {}
  ~SearchResult_Message() override;
  explicit PROTOBUF_CONSTEXPR SearchResult_Message(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SearchResult_Message(const SearchResult_Message& from);
  SearchResult_Message(SearchResult_Message&& from) noexcept
    : SearchResult_Message() {
    *this = ::std::move(from);
  }

  inline SearchResult_Message& operator=(const SearchResult_Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchResult_Message& operator=(SearchResult_Message&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SearchResult_Message& default_instance() {
    return *internal_default_instance();
  }
  static inline const SearchResult_Message* internal_default_instance() {
    return reinterpret_cast<const SearchResult_Message*>(
               &_SearchResult_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SearchResult_Message& a, SearchResult_Message& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchResult_Message* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchResult_Message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SearchResult_Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SearchResult_Message>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SearchResult_Message& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SearchResult_Message& from) {
    SearchResult_Message::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchResult_Message* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pf_gossip.SearchResult.Message";
  }
  protected:
  explicit SearchResult_Message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
    kOwnerFieldNumber = 3,
    kVersionFieldNumber = 4,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string value = 2;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // string owner = 3;
  void clear_owner();
  const std::string& owner() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_owner(ArgT0&& arg0, ArgT... args);
  std::string* mutable_owner();
  PROTOBUF_NODISCARD std::string* release_owner();
  void set_allocated_owner(std::string* owner);
  private:
  const std::string& _internal_owner() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner(const std::string& value);
  std::string* _internal_mutable_owner();
  public:

  // int64 version = 4;
  void clear_version();
  int64_t version() const;
  void set_version(int64_t value);
  private:
  int64_t _internal_version() const;
  void _internal_set_version(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:pf_gossip.SearchResult.Message)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_;
    int64_t version_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Gossip_2eproto;
};
// -------------------------------------------------------------------

class SearchResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pf_gossip.SearchResult) */ {
 public:
  inline SearchResult() : SearchResult(nullptr) {}
  ~SearchResult() override;
  explicit PROTOBUF_CONSTEXPR SearchResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SearchResult(const SearchResult& from);
  SearchResult(SearchResult&& from) noexcept
    : SearchResult() {
    *this = ::std::move(from);
  }

  inline SearchResult& operator=(const SearchResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchResult& operator=(SearchResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SearchResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const SearchResult* internal_default_instance() {
    return reinterpret_cast<const SearchResult*>(
               &_SearchResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SearchResult& a, SearchResult& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SearchResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SearchResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SearchResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SearchResult& from) {
    SearchResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pf_gossip.SearchResult";
  }
  protected:
  explicit SearchResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SearchResult_Message Message;

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
  };
  // repeated .pf_gossip.SearchResult.Message message = 1;
  int message_size() const;
  private:
  int _internal_message_size() const;
  public:
  void clear_message();
  ::pf_gossip::SearchResult_Message* mutable_message(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pf_gossip::SearchResult_Message >*
      mutable_message();
  private:
  const ::pf_gossip::SearchResult_Message& _internal_message(int index) const;
  ::pf_gossip::SearchResult_Message* _internal_add_message();
  public:
  const ::pf_gossip::SearchResult_Message& message(int index) const;
  ::pf_gossip::SearchResult_Message* add_message();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pf_gossip::SearchResult_Message >&
      message() const;

  // @@protoc_insertion_point(class_scope:pf_gossip.SearchResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pf_gossip::SearchResult_Message > message_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Gossip_2eproto;
};
// -------------------------------------------------------------------

class updateResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pf_gossip.updateResult) */ {
 public:
  inline updateResult() : updateResult(nullptr) {}
  ~updateResult() override;
  explicit PROTOBUF_CONSTEXPR updateResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  updateResult(const updateResult& from);
  updateResult(updateResult&& from) noexcept
    : updateResult() {
    *this = ::std::move(from);
  }

  inline updateResult& operator=(const updateResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline updateResult& operator=(updateResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const updateResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const updateResult* internal_default_instance() {
    return reinterpret_cast<const updateResult*>(
               &_updateResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(updateResult& a, updateResult& b) {
    a.Swap(&b);
  }
  inline void Swap(updateResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(updateResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  updateResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<updateResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const updateResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const updateResult& from) {
    updateResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(updateResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pf_gossip.updateResult";
  }
  protected:
  explicit updateResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 2,
    kSucceedFieldNumber = 1,
  };
  // int64 version = 2;
  void clear_version();
  int64_t version() const;
  void set_version(int64_t value);
  private:
  int64_t _internal_version() const;
  void _internal_set_version(int64_t value);
  public:

  // int32 succeed = 1;
  void clear_succeed();
  int32_t succeed() const;
  void set_succeed(int32_t value);
  private:
  int32_t _internal_succeed() const;
  void _internal_set_succeed(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:pf_gossip.updateResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t version_;
    int32_t succeed_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Gossip_2eproto;
};
// -------------------------------------------------------------------

class SlotUpdate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pf_gossip.SlotUpdate) */ {
 public:
  inline SlotUpdate() : SlotUpdate(nullptr) {}
  ~SlotUpdate() override;
  explicit PROTOBUF_CONSTEXPR SlotUpdate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SlotUpdate(const SlotUpdate& from);
  SlotUpdate(SlotUpdate&& from) noexcept
    : SlotUpdate() {
    *this = ::std::move(from);
  }

  inline SlotUpdate& operator=(const SlotUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline SlotUpdate& operator=(SlotUpdate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SlotUpdate& default_instance() {
    return *internal_default_instance();
  }
  static inline const SlotUpdate* internal_default_instance() {
    return reinterpret_cast<const SlotUpdate*>(
               &_SlotUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SlotUpdate& a, SlotUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(SlotUpdate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SlotUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SlotUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SlotUpdate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SlotUpdate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SlotUpdate& from) {
    SlotUpdate::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SlotUpdate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pf_gossip.SlotUpdate";
  }
  protected:
  explicit SlotUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessagesFieldNumber = 3,
    kPassNodesFieldNumber = 4,
    kNameFieldNumber = 1,
    kVersionFieldNumber = 2,
  };
  // repeated .pf_gossip.Message messages = 3;
  int messages_size() const;
  private:
  int _internal_messages_size() const;
  public:
  void clear_messages();
  ::pf_gossip::Message* mutable_messages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pf_gossip::Message >*
      mutable_messages();
  private:
  const ::pf_gossip::Message& _internal_messages(int index) const;
  ::pf_gossip::Message* _internal_add_messages();
  public:
  const ::pf_gossip::Message& messages(int index) const;
  ::pf_gossip::Message* add_messages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pf_gossip::Message >&
      messages() const;

  // repeated string pass_nodes = 4;
  int pass_nodes_size() const;
  private:
  int _internal_pass_nodes_size() const;
  public:
  void clear_pass_nodes();
  const std::string& pass_nodes(int index) const;
  std::string* mutable_pass_nodes(int index);
  void set_pass_nodes(int index, const std::string& value);
  void set_pass_nodes(int index, std::string&& value);
  void set_pass_nodes(int index, const char* value);
  void set_pass_nodes(int index, const char* value, size_t size);
  std::string* add_pass_nodes();
  void add_pass_nodes(const std::string& value);
  void add_pass_nodes(std::string&& value);
  void add_pass_nodes(const char* value);
  void add_pass_nodes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& pass_nodes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_pass_nodes();
  private:
  const std::string& _internal_pass_nodes(int index) const;
  std::string* _internal_add_pass_nodes();
  public:

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int64 version = 2;
  void clear_version();
  int64_t version() const;
  void set_version(int64_t value);
  private:
  int64_t _internal_version() const;
  void _internal_set_version(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:pf_gossip.SlotUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pf_gossip::Message > messages_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> pass_nodes_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int64_t version_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Gossip_2eproto;
};
// -------------------------------------------------------------------

class GossipNodeInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pf_gossip.GossipNodeInfo) */ {
 public:
  inline GossipNodeInfo() : GossipNodeInfo(nullptr) {}
  ~GossipNodeInfo() override;
  explicit PROTOBUF_CONSTEXPR GossipNodeInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GossipNodeInfo(const GossipNodeInfo& from);
  GossipNodeInfo(GossipNodeInfo&& from) noexcept
    : GossipNodeInfo() {
    *this = ::std::move(from);
  }

  inline GossipNodeInfo& operator=(const GossipNodeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GossipNodeInfo& operator=(GossipNodeInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GossipNodeInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const GossipNodeInfo* internal_default_instance() {
    return reinterpret_cast<const GossipNodeInfo*>(
               &_GossipNodeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GossipNodeInfo& a, GossipNodeInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(GossipNodeInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GossipNodeInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GossipNodeInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GossipNodeInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GossipNodeInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GossipNodeInfo& from) {
    GossipNodeInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GossipNodeInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pf_gossip.GossipNodeInfo";
  }
  protected:
  explicit GossipNodeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPassNodesFieldNumber = 4,
    kNameFieldNumber = 1,
    kAddressFieldNumber = 3,
    kVersionFieldNumber = 2,
  };
  // repeated string pass_nodes = 4;
  int pass_nodes_size() const;
  private:
  int _internal_pass_nodes_size() const;
  public:
  void clear_pass_nodes();
  const std::string& pass_nodes(int index) const;
  std::string* mutable_pass_nodes(int index);
  void set_pass_nodes(int index, const std::string& value);
  void set_pass_nodes(int index, std::string&& value);
  void set_pass_nodes(int index, const char* value);
  void set_pass_nodes(int index, const char* value, size_t size);
  std::string* add_pass_nodes();
  void add_pass_nodes(const std::string& value);
  void add_pass_nodes(std::string&& value);
  void add_pass_nodes(const char* value);
  void add_pass_nodes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& pass_nodes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_pass_nodes();
  private:
  const std::string& _internal_pass_nodes(int index) const;
  std::string* _internal_add_pass_nodes();
  public:

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string address = 3;
  void clear_address();
  const std::string& address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // int64 version = 2;
  void clear_version();
  int64_t version() const;
  void set_version(int64_t value);
  private:
  int64_t _internal_version() const;
  void _internal_set_version(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:pf_gossip.GossipNodeInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> pass_nodes_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
    int64_t version_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Gossip_2eproto;
};
// -------------------------------------------------------------------

class NodeVersions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pf_gossip.NodeVersions) */ {
 public:
  inline NodeVersions() : NodeVersions(nullptr) {}
  ~NodeVersions() override;
  explicit PROTOBUF_CONSTEXPR NodeVersions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NodeVersions(const NodeVersions& from);
  NodeVersions(NodeVersions&& from) noexcept
    : NodeVersions() {
    *this = ::std::move(from);
  }

  inline NodeVersions& operator=(const NodeVersions& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeVersions& operator=(NodeVersions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NodeVersions& default_instance() {
    return *internal_default_instance();
  }
  static inline const NodeVersions* internal_default_instance() {
    return reinterpret_cast<const NodeVersions*>(
               &_NodeVersions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(NodeVersions& a, NodeVersions& b) {
    a.Swap(&b);
  }
  inline void Swap(NodeVersions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NodeVersions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NodeVersions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NodeVersions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NodeVersions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NodeVersions& from) {
    NodeVersions::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeVersions* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pf_gossip.NodeVersions";
  }
  protected:
  explicit NodeVersions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeNameFieldNumber = 1,
    kSlotNameFieldNumber = 2,
    kSlotVersionFieldNumber = 3,
  };
  // string node_name = 1;
  void clear_node_name();
  const std::string& node_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_node_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_node_name();
  PROTOBUF_NODISCARD std::string* release_node_name();
  void set_allocated_node_name(std::string* node_name);
  private:
  const std::string& _internal_node_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_node_name(const std::string& value);
  std::string* _internal_mutable_node_name();
  public:

  // string slot_name = 2;
  void clear_slot_name();
  const std::string& slot_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_slot_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_slot_name();
  PROTOBUF_NODISCARD std::string* release_slot_name();
  void set_allocated_slot_name(std::string* slot_name);
  private:
  const std::string& _internal_slot_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_slot_name(const std::string& value);
  std::string* _internal_mutable_slot_name();
  public:

  // int64 slot_version = 3;
  void clear_slot_version();
  int64_t slot_version() const;
  void set_slot_version(int64_t value);
  private:
  int64_t _internal_slot_version() const;
  void _internal_set_slot_version(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:pf_gossip.NodeVersions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr node_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr slot_name_;
    int64_t slot_version_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Gossip_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Message

// string key = 1;
inline void Message::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& Message::key() const {
  // @@protoc_insertion_point(field_get:pf_gossip.Message.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Message::set_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pf_gossip.Message.key)
}
inline std::string* Message::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:pf_gossip.Message.key)
  return _s;
}
inline const std::string& Message::_internal_key() const {
  return _impl_.key_.Get();
}
inline void Message::_internal_set_key(const std::string& value) {
  
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* Message::_internal_mutable_key() {
  
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* Message::release_key() {
  // @@protoc_insertion_point(field_release:pf_gossip.Message.key)
  return _impl_.key_.Release();
}
inline void Message::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pf_gossip.Message.key)
}

// string value = 2;
inline void Message::clear_value() {
  _impl_.value_.ClearToEmpty();
}
inline const std::string& Message::value() const {
  // @@protoc_insertion_point(field_get:pf_gossip.Message.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Message::set_value(ArgT0&& arg0, ArgT... args) {
 
 _impl_.value_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pf_gossip.Message.value)
}
inline std::string* Message::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:pf_gossip.Message.value)
  return _s;
}
inline const std::string& Message::_internal_value() const {
  return _impl_.value_.Get();
}
inline void Message::_internal_set_value(const std::string& value) {
  
  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* Message::_internal_mutable_value() {
  
  return _impl_.value_.Mutable(GetArenaForAllocation());
}
inline std::string* Message::release_value() {
  // @@protoc_insertion_point(field_release:pf_gossip.Message.value)
  return _impl_.value_.Release();
}
inline void Message::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pf_gossip.Message.value)
}

// -------------------------------------------------------------------

// SearchResult_Message

// string key = 1;
inline void SearchResult_Message::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& SearchResult_Message::key() const {
  // @@protoc_insertion_point(field_get:pf_gossip.SearchResult.Message.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchResult_Message::set_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pf_gossip.SearchResult.Message.key)
}
inline std::string* SearchResult_Message::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:pf_gossip.SearchResult.Message.key)
  return _s;
}
inline const std::string& SearchResult_Message::_internal_key() const {
  return _impl_.key_.Get();
}
inline void SearchResult_Message::_internal_set_key(const std::string& value) {
  
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* SearchResult_Message::_internal_mutable_key() {
  
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* SearchResult_Message::release_key() {
  // @@protoc_insertion_point(field_release:pf_gossip.SearchResult.Message.key)
  return _impl_.key_.Release();
}
inline void SearchResult_Message::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pf_gossip.SearchResult.Message.key)
}

// string value = 2;
inline void SearchResult_Message::clear_value() {
  _impl_.value_.ClearToEmpty();
}
inline const std::string& SearchResult_Message::value() const {
  // @@protoc_insertion_point(field_get:pf_gossip.SearchResult.Message.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchResult_Message::set_value(ArgT0&& arg0, ArgT... args) {
 
 _impl_.value_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pf_gossip.SearchResult.Message.value)
}
inline std::string* SearchResult_Message::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:pf_gossip.SearchResult.Message.value)
  return _s;
}
inline const std::string& SearchResult_Message::_internal_value() const {
  return _impl_.value_.Get();
}
inline void SearchResult_Message::_internal_set_value(const std::string& value) {
  
  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* SearchResult_Message::_internal_mutable_value() {
  
  return _impl_.value_.Mutable(GetArenaForAllocation());
}
inline std::string* SearchResult_Message::release_value() {
  // @@protoc_insertion_point(field_release:pf_gossip.SearchResult.Message.value)
  return _impl_.value_.Release();
}
inline void SearchResult_Message::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pf_gossip.SearchResult.Message.value)
}

// string owner = 3;
inline void SearchResult_Message::clear_owner() {
  _impl_.owner_.ClearToEmpty();
}
inline const std::string& SearchResult_Message::owner() const {
  // @@protoc_insertion_point(field_get:pf_gossip.SearchResult.Message.owner)
  return _internal_owner();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchResult_Message::set_owner(ArgT0&& arg0, ArgT... args) {
 
 _impl_.owner_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pf_gossip.SearchResult.Message.owner)
}
inline std::string* SearchResult_Message::mutable_owner() {
  std::string* _s = _internal_mutable_owner();
  // @@protoc_insertion_point(field_mutable:pf_gossip.SearchResult.Message.owner)
  return _s;
}
inline const std::string& SearchResult_Message::_internal_owner() const {
  return _impl_.owner_.Get();
}
inline void SearchResult_Message::_internal_set_owner(const std::string& value) {
  
  _impl_.owner_.Set(value, GetArenaForAllocation());
}
inline std::string* SearchResult_Message::_internal_mutable_owner() {
  
  return _impl_.owner_.Mutable(GetArenaForAllocation());
}
inline std::string* SearchResult_Message::release_owner() {
  // @@protoc_insertion_point(field_release:pf_gossip.SearchResult.Message.owner)
  return _impl_.owner_.Release();
}
inline void SearchResult_Message::set_allocated_owner(std::string* owner) {
  if (owner != nullptr) {
    
  } else {
    
  }
  _impl_.owner_.SetAllocated(owner, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.owner_.IsDefault()) {
    _impl_.owner_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pf_gossip.SearchResult.Message.owner)
}

// int64 version = 4;
inline void SearchResult_Message::clear_version() {
  _impl_.version_ = int64_t{0};
}
inline int64_t SearchResult_Message::_internal_version() const {
  return _impl_.version_;
}
inline int64_t SearchResult_Message::version() const {
  // @@protoc_insertion_point(field_get:pf_gossip.SearchResult.Message.version)
  return _internal_version();
}
inline void SearchResult_Message::_internal_set_version(int64_t value) {
  
  _impl_.version_ = value;
}
inline void SearchResult_Message::set_version(int64_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:pf_gossip.SearchResult.Message.version)
}

// -------------------------------------------------------------------

// SearchResult

// repeated .pf_gossip.SearchResult.Message message = 1;
inline int SearchResult::_internal_message_size() const {
  return _impl_.message_.size();
}
inline int SearchResult::message_size() const {
  return _internal_message_size();
}
inline void SearchResult::clear_message() {
  _impl_.message_.Clear();
}
inline ::pf_gossip::SearchResult_Message* SearchResult::mutable_message(int index) {
  // @@protoc_insertion_point(field_mutable:pf_gossip.SearchResult.message)
  return _impl_.message_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pf_gossip::SearchResult_Message >*
SearchResult::mutable_message() {
  // @@protoc_insertion_point(field_mutable_list:pf_gossip.SearchResult.message)
  return &_impl_.message_;
}
inline const ::pf_gossip::SearchResult_Message& SearchResult::_internal_message(int index) const {
  return _impl_.message_.Get(index);
}
inline const ::pf_gossip::SearchResult_Message& SearchResult::message(int index) const {
  // @@protoc_insertion_point(field_get:pf_gossip.SearchResult.message)
  return _internal_message(index);
}
inline ::pf_gossip::SearchResult_Message* SearchResult::_internal_add_message() {
  return _impl_.message_.Add();
}
inline ::pf_gossip::SearchResult_Message* SearchResult::add_message() {
  ::pf_gossip::SearchResult_Message* _add = _internal_add_message();
  // @@protoc_insertion_point(field_add:pf_gossip.SearchResult.message)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pf_gossip::SearchResult_Message >&
SearchResult::message() const {
  // @@protoc_insertion_point(field_list:pf_gossip.SearchResult.message)
  return _impl_.message_;
}

// -------------------------------------------------------------------

// updateResult

// int32 succeed = 1;
inline void updateResult::clear_succeed() {
  _impl_.succeed_ = 0;
}
inline int32_t updateResult::_internal_succeed() const {
  return _impl_.succeed_;
}
inline int32_t updateResult::succeed() const {
  // @@protoc_insertion_point(field_get:pf_gossip.updateResult.succeed)
  return _internal_succeed();
}
inline void updateResult::_internal_set_succeed(int32_t value) {
  
  _impl_.succeed_ = value;
}
inline void updateResult::set_succeed(int32_t value) {
  _internal_set_succeed(value);
  // @@protoc_insertion_point(field_set:pf_gossip.updateResult.succeed)
}

// int64 version = 2;
inline void updateResult::clear_version() {
  _impl_.version_ = int64_t{0};
}
inline int64_t updateResult::_internal_version() const {
  return _impl_.version_;
}
inline int64_t updateResult::version() const {
  // @@protoc_insertion_point(field_get:pf_gossip.updateResult.version)
  return _internal_version();
}
inline void updateResult::_internal_set_version(int64_t value) {
  
  _impl_.version_ = value;
}
inline void updateResult::set_version(int64_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:pf_gossip.updateResult.version)
}

// -------------------------------------------------------------------

// SlotUpdate

// string name = 1;
inline void SlotUpdate::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& SlotUpdate::name() const {
  // @@protoc_insertion_point(field_get:pf_gossip.SlotUpdate.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SlotUpdate::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pf_gossip.SlotUpdate.name)
}
inline std::string* SlotUpdate::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:pf_gossip.SlotUpdate.name)
  return _s;
}
inline const std::string& SlotUpdate::_internal_name() const {
  return _impl_.name_.Get();
}
inline void SlotUpdate::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* SlotUpdate::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* SlotUpdate::release_name() {
  // @@protoc_insertion_point(field_release:pf_gossip.SlotUpdate.name)
  return _impl_.name_.Release();
}
inline void SlotUpdate::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pf_gossip.SlotUpdate.name)
}

// int64 version = 2;
inline void SlotUpdate::clear_version() {
  _impl_.version_ = int64_t{0};
}
inline int64_t SlotUpdate::_internal_version() const {
  return _impl_.version_;
}
inline int64_t SlotUpdate::version() const {
  // @@protoc_insertion_point(field_get:pf_gossip.SlotUpdate.version)
  return _internal_version();
}
inline void SlotUpdate::_internal_set_version(int64_t value) {
  
  _impl_.version_ = value;
}
inline void SlotUpdate::set_version(int64_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:pf_gossip.SlotUpdate.version)
}

// repeated .pf_gossip.Message messages = 3;
inline int SlotUpdate::_internal_messages_size() const {
  return _impl_.messages_.size();
}
inline int SlotUpdate::messages_size() const {
  return _internal_messages_size();
}
inline void SlotUpdate::clear_messages() {
  _impl_.messages_.Clear();
}
inline ::pf_gossip::Message* SlotUpdate::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:pf_gossip.SlotUpdate.messages)
  return _impl_.messages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pf_gossip::Message >*
SlotUpdate::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:pf_gossip.SlotUpdate.messages)
  return &_impl_.messages_;
}
inline const ::pf_gossip::Message& SlotUpdate::_internal_messages(int index) const {
  return _impl_.messages_.Get(index);
}
inline const ::pf_gossip::Message& SlotUpdate::messages(int index) const {
  // @@protoc_insertion_point(field_get:pf_gossip.SlotUpdate.messages)
  return _internal_messages(index);
}
inline ::pf_gossip::Message* SlotUpdate::_internal_add_messages() {
  return _impl_.messages_.Add();
}
inline ::pf_gossip::Message* SlotUpdate::add_messages() {
  ::pf_gossip::Message* _add = _internal_add_messages();
  // @@protoc_insertion_point(field_add:pf_gossip.SlotUpdate.messages)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pf_gossip::Message >&
SlotUpdate::messages() const {
  // @@protoc_insertion_point(field_list:pf_gossip.SlotUpdate.messages)
  return _impl_.messages_;
}

// repeated string pass_nodes = 4;
inline int SlotUpdate::_internal_pass_nodes_size() const {
  return _impl_.pass_nodes_.size();
}
inline int SlotUpdate::pass_nodes_size() const {
  return _internal_pass_nodes_size();
}
inline void SlotUpdate::clear_pass_nodes() {
  _impl_.pass_nodes_.Clear();
}
inline std::string* SlotUpdate::add_pass_nodes() {
  std::string* _s = _internal_add_pass_nodes();
  // @@protoc_insertion_point(field_add_mutable:pf_gossip.SlotUpdate.pass_nodes)
  return _s;
}
inline const std::string& SlotUpdate::_internal_pass_nodes(int index) const {
  return _impl_.pass_nodes_.Get(index);
}
inline const std::string& SlotUpdate::pass_nodes(int index) const {
  // @@protoc_insertion_point(field_get:pf_gossip.SlotUpdate.pass_nodes)
  return _internal_pass_nodes(index);
}
inline std::string* SlotUpdate::mutable_pass_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:pf_gossip.SlotUpdate.pass_nodes)
  return _impl_.pass_nodes_.Mutable(index);
}
inline void SlotUpdate::set_pass_nodes(int index, const std::string& value) {
  _impl_.pass_nodes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:pf_gossip.SlotUpdate.pass_nodes)
}
inline void SlotUpdate::set_pass_nodes(int index, std::string&& value) {
  _impl_.pass_nodes_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:pf_gossip.SlotUpdate.pass_nodes)
}
inline void SlotUpdate::set_pass_nodes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.pass_nodes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pf_gossip.SlotUpdate.pass_nodes)
}
inline void SlotUpdate::set_pass_nodes(int index, const char* value, size_t size) {
  _impl_.pass_nodes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pf_gossip.SlotUpdate.pass_nodes)
}
inline std::string* SlotUpdate::_internal_add_pass_nodes() {
  return _impl_.pass_nodes_.Add();
}
inline void SlotUpdate::add_pass_nodes(const std::string& value) {
  _impl_.pass_nodes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pf_gossip.SlotUpdate.pass_nodes)
}
inline void SlotUpdate::add_pass_nodes(std::string&& value) {
  _impl_.pass_nodes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pf_gossip.SlotUpdate.pass_nodes)
}
inline void SlotUpdate::add_pass_nodes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.pass_nodes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pf_gossip.SlotUpdate.pass_nodes)
}
inline void SlotUpdate::add_pass_nodes(const char* value, size_t size) {
  _impl_.pass_nodes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pf_gossip.SlotUpdate.pass_nodes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SlotUpdate::pass_nodes() const {
  // @@protoc_insertion_point(field_list:pf_gossip.SlotUpdate.pass_nodes)
  return _impl_.pass_nodes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SlotUpdate::mutable_pass_nodes() {
  // @@protoc_insertion_point(field_mutable_list:pf_gossip.SlotUpdate.pass_nodes)
  return &_impl_.pass_nodes_;
}

// -------------------------------------------------------------------

// GossipNodeInfo

// string name = 1;
inline void GossipNodeInfo::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GossipNodeInfo::name() const {
  // @@protoc_insertion_point(field_get:pf_gossip.GossipNodeInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GossipNodeInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pf_gossip.GossipNodeInfo.name)
}
inline std::string* GossipNodeInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:pf_gossip.GossipNodeInfo.name)
  return _s;
}
inline const std::string& GossipNodeInfo::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GossipNodeInfo::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GossipNodeInfo::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GossipNodeInfo::release_name() {
  // @@protoc_insertion_point(field_release:pf_gossip.GossipNodeInfo.name)
  return _impl_.name_.Release();
}
inline void GossipNodeInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pf_gossip.GossipNodeInfo.name)
}

// int64 version = 2;
inline void GossipNodeInfo::clear_version() {
  _impl_.version_ = int64_t{0};
}
inline int64_t GossipNodeInfo::_internal_version() const {
  return _impl_.version_;
}
inline int64_t GossipNodeInfo::version() const {
  // @@protoc_insertion_point(field_get:pf_gossip.GossipNodeInfo.version)
  return _internal_version();
}
inline void GossipNodeInfo::_internal_set_version(int64_t value) {
  
  _impl_.version_ = value;
}
inline void GossipNodeInfo::set_version(int64_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:pf_gossip.GossipNodeInfo.version)
}

// string address = 3;
inline void GossipNodeInfo::clear_address() {
  _impl_.address_.ClearToEmpty();
}
inline const std::string& GossipNodeInfo::address() const {
  // @@protoc_insertion_point(field_get:pf_gossip.GossipNodeInfo.address)
  return _internal_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GossipNodeInfo::set_address(ArgT0&& arg0, ArgT... args) {
 
 _impl_.address_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pf_gossip.GossipNodeInfo.address)
}
inline std::string* GossipNodeInfo::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:pf_gossip.GossipNodeInfo.address)
  return _s;
}
inline const std::string& GossipNodeInfo::_internal_address() const {
  return _impl_.address_.Get();
}
inline void GossipNodeInfo::_internal_set_address(const std::string& value) {
  
  _impl_.address_.Set(value, GetArenaForAllocation());
}
inline std::string* GossipNodeInfo::_internal_mutable_address() {
  
  return _impl_.address_.Mutable(GetArenaForAllocation());
}
inline std::string* GossipNodeInfo::release_address() {
  // @@protoc_insertion_point(field_release:pf_gossip.GossipNodeInfo.address)
  return _impl_.address_.Release();
}
inline void GossipNodeInfo::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  _impl_.address_.SetAllocated(address, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.address_.IsDefault()) {
    _impl_.address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pf_gossip.GossipNodeInfo.address)
}

// repeated string pass_nodes = 4;
inline int GossipNodeInfo::_internal_pass_nodes_size() const {
  return _impl_.pass_nodes_.size();
}
inline int GossipNodeInfo::pass_nodes_size() const {
  return _internal_pass_nodes_size();
}
inline void GossipNodeInfo::clear_pass_nodes() {
  _impl_.pass_nodes_.Clear();
}
inline std::string* GossipNodeInfo::add_pass_nodes() {
  std::string* _s = _internal_add_pass_nodes();
  // @@protoc_insertion_point(field_add_mutable:pf_gossip.GossipNodeInfo.pass_nodes)
  return _s;
}
inline const std::string& GossipNodeInfo::_internal_pass_nodes(int index) const {
  return _impl_.pass_nodes_.Get(index);
}
inline const std::string& GossipNodeInfo::pass_nodes(int index) const {
  // @@protoc_insertion_point(field_get:pf_gossip.GossipNodeInfo.pass_nodes)
  return _internal_pass_nodes(index);
}
inline std::string* GossipNodeInfo::mutable_pass_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:pf_gossip.GossipNodeInfo.pass_nodes)
  return _impl_.pass_nodes_.Mutable(index);
}
inline void GossipNodeInfo::set_pass_nodes(int index, const std::string& value) {
  _impl_.pass_nodes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:pf_gossip.GossipNodeInfo.pass_nodes)
}
inline void GossipNodeInfo::set_pass_nodes(int index, std::string&& value) {
  _impl_.pass_nodes_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:pf_gossip.GossipNodeInfo.pass_nodes)
}
inline void GossipNodeInfo::set_pass_nodes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.pass_nodes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pf_gossip.GossipNodeInfo.pass_nodes)
}
inline void GossipNodeInfo::set_pass_nodes(int index, const char* value, size_t size) {
  _impl_.pass_nodes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pf_gossip.GossipNodeInfo.pass_nodes)
}
inline std::string* GossipNodeInfo::_internal_add_pass_nodes() {
  return _impl_.pass_nodes_.Add();
}
inline void GossipNodeInfo::add_pass_nodes(const std::string& value) {
  _impl_.pass_nodes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pf_gossip.GossipNodeInfo.pass_nodes)
}
inline void GossipNodeInfo::add_pass_nodes(std::string&& value) {
  _impl_.pass_nodes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pf_gossip.GossipNodeInfo.pass_nodes)
}
inline void GossipNodeInfo::add_pass_nodes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.pass_nodes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pf_gossip.GossipNodeInfo.pass_nodes)
}
inline void GossipNodeInfo::add_pass_nodes(const char* value, size_t size) {
  _impl_.pass_nodes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pf_gossip.GossipNodeInfo.pass_nodes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GossipNodeInfo::pass_nodes() const {
  // @@protoc_insertion_point(field_list:pf_gossip.GossipNodeInfo.pass_nodes)
  return _impl_.pass_nodes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GossipNodeInfo::mutable_pass_nodes() {
  // @@protoc_insertion_point(field_mutable_list:pf_gossip.GossipNodeInfo.pass_nodes)
  return &_impl_.pass_nodes_;
}

// -------------------------------------------------------------------

// NodeVersions

// string node_name = 1;
inline void NodeVersions::clear_node_name() {
  _impl_.node_name_.ClearToEmpty();
}
inline const std::string& NodeVersions::node_name() const {
  // @@protoc_insertion_point(field_get:pf_gossip.NodeVersions.node_name)
  return _internal_node_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NodeVersions::set_node_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.node_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pf_gossip.NodeVersions.node_name)
}
inline std::string* NodeVersions::mutable_node_name() {
  std::string* _s = _internal_mutable_node_name();
  // @@protoc_insertion_point(field_mutable:pf_gossip.NodeVersions.node_name)
  return _s;
}
inline const std::string& NodeVersions::_internal_node_name() const {
  return _impl_.node_name_.Get();
}
inline void NodeVersions::_internal_set_node_name(const std::string& value) {
  
  _impl_.node_name_.Set(value, GetArenaForAllocation());
}
inline std::string* NodeVersions::_internal_mutable_node_name() {
  
  return _impl_.node_name_.Mutable(GetArenaForAllocation());
}
inline std::string* NodeVersions::release_node_name() {
  // @@protoc_insertion_point(field_release:pf_gossip.NodeVersions.node_name)
  return _impl_.node_name_.Release();
}
inline void NodeVersions::set_allocated_node_name(std::string* node_name) {
  if (node_name != nullptr) {
    
  } else {
    
  }
  _impl_.node_name_.SetAllocated(node_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.node_name_.IsDefault()) {
    _impl_.node_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pf_gossip.NodeVersions.node_name)
}

// string slot_name = 2;
inline void NodeVersions::clear_slot_name() {
  _impl_.slot_name_.ClearToEmpty();
}
inline const std::string& NodeVersions::slot_name() const {
  // @@protoc_insertion_point(field_get:pf_gossip.NodeVersions.slot_name)
  return _internal_slot_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NodeVersions::set_slot_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.slot_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pf_gossip.NodeVersions.slot_name)
}
inline std::string* NodeVersions::mutable_slot_name() {
  std::string* _s = _internal_mutable_slot_name();
  // @@protoc_insertion_point(field_mutable:pf_gossip.NodeVersions.slot_name)
  return _s;
}
inline const std::string& NodeVersions::_internal_slot_name() const {
  return _impl_.slot_name_.Get();
}
inline void NodeVersions::_internal_set_slot_name(const std::string& value) {
  
  _impl_.slot_name_.Set(value, GetArenaForAllocation());
}
inline std::string* NodeVersions::_internal_mutable_slot_name() {
  
  return _impl_.slot_name_.Mutable(GetArenaForAllocation());
}
inline std::string* NodeVersions::release_slot_name() {
  // @@protoc_insertion_point(field_release:pf_gossip.NodeVersions.slot_name)
  return _impl_.slot_name_.Release();
}
inline void NodeVersions::set_allocated_slot_name(std::string* slot_name) {
  if (slot_name != nullptr) {
    
  } else {
    
  }
  _impl_.slot_name_.SetAllocated(slot_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.slot_name_.IsDefault()) {
    _impl_.slot_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pf_gossip.NodeVersions.slot_name)
}

// int64 slot_version = 3;
inline void NodeVersions::clear_slot_version() {
  _impl_.slot_version_ = int64_t{0};
}
inline int64_t NodeVersions::_internal_slot_version() const {
  return _impl_.slot_version_;
}
inline int64_t NodeVersions::slot_version() const {
  // @@protoc_insertion_point(field_get:pf_gossip.NodeVersions.slot_version)
  return _internal_slot_version();
}
inline void NodeVersions::_internal_set_slot_version(int64_t value) {
  
  _impl_.slot_version_ = value;
}
inline void NodeVersions::set_slot_version(int64_t value) {
  _internal_set_slot_version(value);
  // @@protoc_insertion_point(field_set:pf_gossip.NodeVersions.slot_version)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pf_gossip

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Gossip_2eproto
