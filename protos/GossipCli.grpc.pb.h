// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: GossipCli.proto
#ifndef GRPC_GossipCli_2eproto__INCLUDED
#define GRPC_GossipCli_2eproto__INCLUDED

#include "GossipCli.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace pf_gossip_cli {

class GossipClient final {
 public:
  static constexpr char const* service_full_name() {
    return "pf_gossip_cli.GossipClient";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status addMessage(::grpc::ClientContext* context, const ::pf_gossip::Message& request, ::pf_gossip_cli::Echo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pf_gossip_cli::Echo>> AsyncaddMessage(::grpc::ClientContext* context, const ::pf_gossip::Message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pf_gossip_cli::Echo>>(AsyncaddMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pf_gossip_cli::Echo>> PrepareAsyncaddMessage(::grpc::ClientContext* context, const ::pf_gossip::Message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pf_gossip_cli::Echo>>(PrepareAsyncaddMessageRaw(context, request, cq));
    }
    virtual ::grpc::Status deleteMessage(::grpc::ClientContext* context, const ::pf_gossip_cli::Key& request, ::pf_gossip_cli::Echo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pf_gossip_cli::Echo>> AsyncdeleteMessage(::grpc::ClientContext* context, const ::pf_gossip_cli::Key& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pf_gossip_cli::Echo>>(AsyncdeleteMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pf_gossip_cli::Echo>> PrepareAsyncdeleteMessage(::grpc::ClientContext* context, const ::pf_gossip_cli::Key& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pf_gossip_cli::Echo>>(PrepareAsyncdeleteMessageRaw(context, request, cq));
    }
    virtual ::grpc::Status getMessage(::grpc::ClientContext* context, const ::pf_gossip_cli::Key& request, ::pf_gossip::Message* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pf_gossip::Message>> AsyncgetMessage(::grpc::ClientContext* context, const ::pf_gossip_cli::Key& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pf_gossip::Message>>(AsyncgetMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pf_gossip::Message>> PrepareAsyncgetMessage(::grpc::ClientContext* context, const ::pf_gossip_cli::Key& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pf_gossip::Message>>(PrepareAsyncgetMessageRaw(context, request, cq));
    }
    // 查找 message 信息
    virtual ::grpc::Status searchMessage(::grpc::ClientContext* context, const ::pf_gossip_cli::SearchInfo& request, ::pf_gossip::SearchResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pf_gossip::SearchResult>> AsyncsearchMessage(::grpc::ClientContext* context, const ::pf_gossip_cli::SearchInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pf_gossip::SearchResult>>(AsyncsearchMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pf_gossip::SearchResult>> PrepareAsyncsearchMessage(::grpc::ClientContext* context, const ::pf_gossip_cli::SearchInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pf_gossip::SearchResult>>(PrepareAsyncsearchMessageRaw(context, request, cq));
    }
    virtual ::grpc::Status getGossipNetwork(::grpc::ClientContext* context, const ::google::protobuf::Any& request, ::pf_gossip_cli::JsonValue* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pf_gossip_cli::JsonValue>> AsyncgetGossipNetwork(::grpc::ClientContext* context, const ::google::protobuf::Any& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pf_gossip_cli::JsonValue>>(AsyncgetGossipNetworkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pf_gossip_cli::JsonValue>> PrepareAsyncgetGossipNetwork(::grpc::ClientContext* context, const ::google::protobuf::Any& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pf_gossip_cli::JsonValue>>(PrepareAsyncgetGossipNetworkRaw(context, request, cq));
    }
    // 当前的网络结构
    virtual ::grpc::Status getNodeStatus(::grpc::ClientContext* context, const ::google::protobuf::Any& request, ::pf_gossip_cli::JsonValue* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pf_gossip_cli::JsonValue>> AsyncgetNodeStatus(::grpc::ClientContext* context, const ::google::protobuf::Any& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pf_gossip_cli::JsonValue>>(AsyncgetNodeStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pf_gossip_cli::JsonValue>> PrepareAsyncgetNodeStatus(::grpc::ClientContext* context, const ::google::protobuf::Any& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pf_gossip_cli::JsonValue>>(PrepareAsyncgetNodeStatusRaw(context, request, cq));
    }
    // 当前节点的状态信息
    virtual ::grpc::Status echo(::grpc::ClientContext* context, const ::pf_gossip_cli::Echo& request, ::pf_gossip_cli::Echo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pf_gossip_cli::Echo>> Asyncecho(::grpc::ClientContext* context, const ::pf_gossip_cli::Echo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pf_gossip_cli::Echo>>(AsyncechoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pf_gossip_cli::Echo>> PrepareAsyncecho(::grpc::ClientContext* context, const ::pf_gossip_cli::Echo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pf_gossip_cli::Echo>>(PrepareAsyncechoRaw(context, request, cq));
    }
    virtual ::grpc::Status connect(::grpc::ClientContext* context, const ::pf_gossip_cli::Url& request, ::pf_gossip_cli::Echo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pf_gossip_cli::Echo>> Asyncconnect(::grpc::ClientContext* context, const ::pf_gossip_cli::Url& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pf_gossip_cli::Echo>>(AsyncconnectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pf_gossip_cli::Echo>> PrepareAsyncconnect(::grpc::ClientContext* context, const ::pf_gossip_cli::Url& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pf_gossip_cli::Echo>>(PrepareAsyncconnectRaw(context, request, cq));
    }
    // 将当前节点连接到某个节点上
    virtual ::grpc::Status shutdown(::grpc::ClientContext* context, const ::google::protobuf::Any& request, ::pf_gossip_cli::Echo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pf_gossip_cli::Echo>> Asyncshutdown(::grpc::ClientContext* context, const ::google::protobuf::Any& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pf_gossip_cli::Echo>>(AsyncshutdownRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pf_gossip_cli::Echo>> PrepareAsyncshutdown(::grpc::ClientContext* context, const ::google::protobuf::Any& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pf_gossip_cli::Echo>>(PrepareAsyncshutdownRaw(context, request, cq));
    }
    // 关闭
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void addMessage(::grpc::ClientContext* context, const ::pf_gossip::Message* request, ::pf_gossip_cli::Echo* response, std::function<void(::grpc::Status)>) = 0;
      virtual void addMessage(::grpc::ClientContext* context, const ::pf_gossip::Message* request, ::pf_gossip_cli::Echo* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void deleteMessage(::grpc::ClientContext* context, const ::pf_gossip_cli::Key* request, ::pf_gossip_cli::Echo* response, std::function<void(::grpc::Status)>) = 0;
      virtual void deleteMessage(::grpc::ClientContext* context, const ::pf_gossip_cli::Key* request, ::pf_gossip_cli::Echo* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void getMessage(::grpc::ClientContext* context, const ::pf_gossip_cli::Key* request, ::pf_gossip::Message* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getMessage(::grpc::ClientContext* context, const ::pf_gossip_cli::Key* request, ::pf_gossip::Message* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // 查找 message 信息
      virtual void searchMessage(::grpc::ClientContext* context, const ::pf_gossip_cli::SearchInfo* request, ::pf_gossip::SearchResult* response, std::function<void(::grpc::Status)>) = 0;
      virtual void searchMessage(::grpc::ClientContext* context, const ::pf_gossip_cli::SearchInfo* request, ::pf_gossip::SearchResult* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void getGossipNetwork(::grpc::ClientContext* context, const ::google::protobuf::Any* request, ::pf_gossip_cli::JsonValue* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getGossipNetwork(::grpc::ClientContext* context, const ::google::protobuf::Any* request, ::pf_gossip_cli::JsonValue* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // 当前的网络结构
      virtual void getNodeStatus(::grpc::ClientContext* context, const ::google::protobuf::Any* request, ::pf_gossip_cli::JsonValue* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getNodeStatus(::grpc::ClientContext* context, const ::google::protobuf::Any* request, ::pf_gossip_cli::JsonValue* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // 当前节点的状态信息
      virtual void echo(::grpc::ClientContext* context, const ::pf_gossip_cli::Echo* request, ::pf_gossip_cli::Echo* response, std::function<void(::grpc::Status)>) = 0;
      virtual void echo(::grpc::ClientContext* context, const ::pf_gossip_cli::Echo* request, ::pf_gossip_cli::Echo* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void connect(::grpc::ClientContext* context, const ::pf_gossip_cli::Url* request, ::pf_gossip_cli::Echo* response, std::function<void(::grpc::Status)>) = 0;
      virtual void connect(::grpc::ClientContext* context, const ::pf_gossip_cli::Url* request, ::pf_gossip_cli::Echo* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // 将当前节点连接到某个节点上
      virtual void shutdown(::grpc::ClientContext* context, const ::google::protobuf::Any* request, ::pf_gossip_cli::Echo* response, std::function<void(::grpc::Status)>) = 0;
      virtual void shutdown(::grpc::ClientContext* context, const ::google::protobuf::Any* request, ::pf_gossip_cli::Echo* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // 关闭
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pf_gossip_cli::Echo>* AsyncaddMessageRaw(::grpc::ClientContext* context, const ::pf_gossip::Message& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pf_gossip_cli::Echo>* PrepareAsyncaddMessageRaw(::grpc::ClientContext* context, const ::pf_gossip::Message& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pf_gossip_cli::Echo>* AsyncdeleteMessageRaw(::grpc::ClientContext* context, const ::pf_gossip_cli::Key& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pf_gossip_cli::Echo>* PrepareAsyncdeleteMessageRaw(::grpc::ClientContext* context, const ::pf_gossip_cli::Key& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pf_gossip::Message>* AsyncgetMessageRaw(::grpc::ClientContext* context, const ::pf_gossip_cli::Key& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pf_gossip::Message>* PrepareAsyncgetMessageRaw(::grpc::ClientContext* context, const ::pf_gossip_cli::Key& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pf_gossip::SearchResult>* AsyncsearchMessageRaw(::grpc::ClientContext* context, const ::pf_gossip_cli::SearchInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pf_gossip::SearchResult>* PrepareAsyncsearchMessageRaw(::grpc::ClientContext* context, const ::pf_gossip_cli::SearchInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pf_gossip_cli::JsonValue>* AsyncgetGossipNetworkRaw(::grpc::ClientContext* context, const ::google::protobuf::Any& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pf_gossip_cli::JsonValue>* PrepareAsyncgetGossipNetworkRaw(::grpc::ClientContext* context, const ::google::protobuf::Any& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pf_gossip_cli::JsonValue>* AsyncgetNodeStatusRaw(::grpc::ClientContext* context, const ::google::protobuf::Any& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pf_gossip_cli::JsonValue>* PrepareAsyncgetNodeStatusRaw(::grpc::ClientContext* context, const ::google::protobuf::Any& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pf_gossip_cli::Echo>* AsyncechoRaw(::grpc::ClientContext* context, const ::pf_gossip_cli::Echo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pf_gossip_cli::Echo>* PrepareAsyncechoRaw(::grpc::ClientContext* context, const ::pf_gossip_cli::Echo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pf_gossip_cli::Echo>* AsyncconnectRaw(::grpc::ClientContext* context, const ::pf_gossip_cli::Url& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pf_gossip_cli::Echo>* PrepareAsyncconnectRaw(::grpc::ClientContext* context, const ::pf_gossip_cli::Url& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pf_gossip_cli::Echo>* AsyncshutdownRaw(::grpc::ClientContext* context, const ::google::protobuf::Any& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pf_gossip_cli::Echo>* PrepareAsyncshutdownRaw(::grpc::ClientContext* context, const ::google::protobuf::Any& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status addMessage(::grpc::ClientContext* context, const ::pf_gossip::Message& request, ::pf_gossip_cli::Echo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pf_gossip_cli::Echo>> AsyncaddMessage(::grpc::ClientContext* context, const ::pf_gossip::Message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pf_gossip_cli::Echo>>(AsyncaddMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pf_gossip_cli::Echo>> PrepareAsyncaddMessage(::grpc::ClientContext* context, const ::pf_gossip::Message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pf_gossip_cli::Echo>>(PrepareAsyncaddMessageRaw(context, request, cq));
    }
    ::grpc::Status deleteMessage(::grpc::ClientContext* context, const ::pf_gossip_cli::Key& request, ::pf_gossip_cli::Echo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pf_gossip_cli::Echo>> AsyncdeleteMessage(::grpc::ClientContext* context, const ::pf_gossip_cli::Key& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pf_gossip_cli::Echo>>(AsyncdeleteMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pf_gossip_cli::Echo>> PrepareAsyncdeleteMessage(::grpc::ClientContext* context, const ::pf_gossip_cli::Key& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pf_gossip_cli::Echo>>(PrepareAsyncdeleteMessageRaw(context, request, cq));
    }
    ::grpc::Status getMessage(::grpc::ClientContext* context, const ::pf_gossip_cli::Key& request, ::pf_gossip::Message* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pf_gossip::Message>> AsyncgetMessage(::grpc::ClientContext* context, const ::pf_gossip_cli::Key& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pf_gossip::Message>>(AsyncgetMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pf_gossip::Message>> PrepareAsyncgetMessage(::grpc::ClientContext* context, const ::pf_gossip_cli::Key& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pf_gossip::Message>>(PrepareAsyncgetMessageRaw(context, request, cq));
    }
    ::grpc::Status searchMessage(::grpc::ClientContext* context, const ::pf_gossip_cli::SearchInfo& request, ::pf_gossip::SearchResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pf_gossip::SearchResult>> AsyncsearchMessage(::grpc::ClientContext* context, const ::pf_gossip_cli::SearchInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pf_gossip::SearchResult>>(AsyncsearchMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pf_gossip::SearchResult>> PrepareAsyncsearchMessage(::grpc::ClientContext* context, const ::pf_gossip_cli::SearchInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pf_gossip::SearchResult>>(PrepareAsyncsearchMessageRaw(context, request, cq));
    }
    ::grpc::Status getGossipNetwork(::grpc::ClientContext* context, const ::google::protobuf::Any& request, ::pf_gossip_cli::JsonValue* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pf_gossip_cli::JsonValue>> AsyncgetGossipNetwork(::grpc::ClientContext* context, const ::google::protobuf::Any& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pf_gossip_cli::JsonValue>>(AsyncgetGossipNetworkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pf_gossip_cli::JsonValue>> PrepareAsyncgetGossipNetwork(::grpc::ClientContext* context, const ::google::protobuf::Any& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pf_gossip_cli::JsonValue>>(PrepareAsyncgetGossipNetworkRaw(context, request, cq));
    }
    ::grpc::Status getNodeStatus(::grpc::ClientContext* context, const ::google::protobuf::Any& request, ::pf_gossip_cli::JsonValue* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pf_gossip_cli::JsonValue>> AsyncgetNodeStatus(::grpc::ClientContext* context, const ::google::protobuf::Any& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pf_gossip_cli::JsonValue>>(AsyncgetNodeStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pf_gossip_cli::JsonValue>> PrepareAsyncgetNodeStatus(::grpc::ClientContext* context, const ::google::protobuf::Any& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pf_gossip_cli::JsonValue>>(PrepareAsyncgetNodeStatusRaw(context, request, cq));
    }
    ::grpc::Status echo(::grpc::ClientContext* context, const ::pf_gossip_cli::Echo& request, ::pf_gossip_cli::Echo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pf_gossip_cli::Echo>> Asyncecho(::grpc::ClientContext* context, const ::pf_gossip_cli::Echo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pf_gossip_cli::Echo>>(AsyncechoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pf_gossip_cli::Echo>> PrepareAsyncecho(::grpc::ClientContext* context, const ::pf_gossip_cli::Echo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pf_gossip_cli::Echo>>(PrepareAsyncechoRaw(context, request, cq));
    }
    ::grpc::Status connect(::grpc::ClientContext* context, const ::pf_gossip_cli::Url& request, ::pf_gossip_cli::Echo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pf_gossip_cli::Echo>> Asyncconnect(::grpc::ClientContext* context, const ::pf_gossip_cli::Url& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pf_gossip_cli::Echo>>(AsyncconnectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pf_gossip_cli::Echo>> PrepareAsyncconnect(::grpc::ClientContext* context, const ::pf_gossip_cli::Url& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pf_gossip_cli::Echo>>(PrepareAsyncconnectRaw(context, request, cq));
    }
    ::grpc::Status shutdown(::grpc::ClientContext* context, const ::google::protobuf::Any& request, ::pf_gossip_cli::Echo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pf_gossip_cli::Echo>> Asyncshutdown(::grpc::ClientContext* context, const ::google::protobuf::Any& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pf_gossip_cli::Echo>>(AsyncshutdownRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pf_gossip_cli::Echo>> PrepareAsyncshutdown(::grpc::ClientContext* context, const ::google::protobuf::Any& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pf_gossip_cli::Echo>>(PrepareAsyncshutdownRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void addMessage(::grpc::ClientContext* context, const ::pf_gossip::Message* request, ::pf_gossip_cli::Echo* response, std::function<void(::grpc::Status)>) override;
      void addMessage(::grpc::ClientContext* context, const ::pf_gossip::Message* request, ::pf_gossip_cli::Echo* response, ::grpc::ClientUnaryReactor* reactor) override;
      void deleteMessage(::grpc::ClientContext* context, const ::pf_gossip_cli::Key* request, ::pf_gossip_cli::Echo* response, std::function<void(::grpc::Status)>) override;
      void deleteMessage(::grpc::ClientContext* context, const ::pf_gossip_cli::Key* request, ::pf_gossip_cli::Echo* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getMessage(::grpc::ClientContext* context, const ::pf_gossip_cli::Key* request, ::pf_gossip::Message* response, std::function<void(::grpc::Status)>) override;
      void getMessage(::grpc::ClientContext* context, const ::pf_gossip_cli::Key* request, ::pf_gossip::Message* response, ::grpc::ClientUnaryReactor* reactor) override;
      void searchMessage(::grpc::ClientContext* context, const ::pf_gossip_cli::SearchInfo* request, ::pf_gossip::SearchResult* response, std::function<void(::grpc::Status)>) override;
      void searchMessage(::grpc::ClientContext* context, const ::pf_gossip_cli::SearchInfo* request, ::pf_gossip::SearchResult* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getGossipNetwork(::grpc::ClientContext* context, const ::google::protobuf::Any* request, ::pf_gossip_cli::JsonValue* response, std::function<void(::grpc::Status)>) override;
      void getGossipNetwork(::grpc::ClientContext* context, const ::google::protobuf::Any* request, ::pf_gossip_cli::JsonValue* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getNodeStatus(::grpc::ClientContext* context, const ::google::protobuf::Any* request, ::pf_gossip_cli::JsonValue* response, std::function<void(::grpc::Status)>) override;
      void getNodeStatus(::grpc::ClientContext* context, const ::google::protobuf::Any* request, ::pf_gossip_cli::JsonValue* response, ::grpc::ClientUnaryReactor* reactor) override;
      void echo(::grpc::ClientContext* context, const ::pf_gossip_cli::Echo* request, ::pf_gossip_cli::Echo* response, std::function<void(::grpc::Status)>) override;
      void echo(::grpc::ClientContext* context, const ::pf_gossip_cli::Echo* request, ::pf_gossip_cli::Echo* response, ::grpc::ClientUnaryReactor* reactor) override;
      void connect(::grpc::ClientContext* context, const ::pf_gossip_cli::Url* request, ::pf_gossip_cli::Echo* response, std::function<void(::grpc::Status)>) override;
      void connect(::grpc::ClientContext* context, const ::pf_gossip_cli::Url* request, ::pf_gossip_cli::Echo* response, ::grpc::ClientUnaryReactor* reactor) override;
      void shutdown(::grpc::ClientContext* context, const ::google::protobuf::Any* request, ::pf_gossip_cli::Echo* response, std::function<void(::grpc::Status)>) override;
      void shutdown(::grpc::ClientContext* context, const ::google::protobuf::Any* request, ::pf_gossip_cli::Echo* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::pf_gossip_cli::Echo>* AsyncaddMessageRaw(::grpc::ClientContext* context, const ::pf_gossip::Message& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pf_gossip_cli::Echo>* PrepareAsyncaddMessageRaw(::grpc::ClientContext* context, const ::pf_gossip::Message& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pf_gossip_cli::Echo>* AsyncdeleteMessageRaw(::grpc::ClientContext* context, const ::pf_gossip_cli::Key& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pf_gossip_cli::Echo>* PrepareAsyncdeleteMessageRaw(::grpc::ClientContext* context, const ::pf_gossip_cli::Key& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pf_gossip::Message>* AsyncgetMessageRaw(::grpc::ClientContext* context, const ::pf_gossip_cli::Key& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pf_gossip::Message>* PrepareAsyncgetMessageRaw(::grpc::ClientContext* context, const ::pf_gossip_cli::Key& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pf_gossip::SearchResult>* AsyncsearchMessageRaw(::grpc::ClientContext* context, const ::pf_gossip_cli::SearchInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pf_gossip::SearchResult>* PrepareAsyncsearchMessageRaw(::grpc::ClientContext* context, const ::pf_gossip_cli::SearchInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pf_gossip_cli::JsonValue>* AsyncgetGossipNetworkRaw(::grpc::ClientContext* context, const ::google::protobuf::Any& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pf_gossip_cli::JsonValue>* PrepareAsyncgetGossipNetworkRaw(::grpc::ClientContext* context, const ::google::protobuf::Any& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pf_gossip_cli::JsonValue>* AsyncgetNodeStatusRaw(::grpc::ClientContext* context, const ::google::protobuf::Any& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pf_gossip_cli::JsonValue>* PrepareAsyncgetNodeStatusRaw(::grpc::ClientContext* context, const ::google::protobuf::Any& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pf_gossip_cli::Echo>* AsyncechoRaw(::grpc::ClientContext* context, const ::pf_gossip_cli::Echo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pf_gossip_cli::Echo>* PrepareAsyncechoRaw(::grpc::ClientContext* context, const ::pf_gossip_cli::Echo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pf_gossip_cli::Echo>* AsyncconnectRaw(::grpc::ClientContext* context, const ::pf_gossip_cli::Url& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pf_gossip_cli::Echo>* PrepareAsyncconnectRaw(::grpc::ClientContext* context, const ::pf_gossip_cli::Url& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pf_gossip_cli::Echo>* AsyncshutdownRaw(::grpc::ClientContext* context, const ::google::protobuf::Any& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pf_gossip_cli::Echo>* PrepareAsyncshutdownRaw(::grpc::ClientContext* context, const ::google::protobuf::Any& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_addMessage_;
    const ::grpc::internal::RpcMethod rpcmethod_deleteMessage_;
    const ::grpc::internal::RpcMethod rpcmethod_getMessage_;
    const ::grpc::internal::RpcMethod rpcmethod_searchMessage_;
    const ::grpc::internal::RpcMethod rpcmethod_getGossipNetwork_;
    const ::grpc::internal::RpcMethod rpcmethod_getNodeStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_echo_;
    const ::grpc::internal::RpcMethod rpcmethod_connect_;
    const ::grpc::internal::RpcMethod rpcmethod_shutdown_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status addMessage(::grpc::ServerContext* context, const ::pf_gossip::Message* request, ::pf_gossip_cli::Echo* response);
    virtual ::grpc::Status deleteMessage(::grpc::ServerContext* context, const ::pf_gossip_cli::Key* request, ::pf_gossip_cli::Echo* response);
    virtual ::grpc::Status getMessage(::grpc::ServerContext* context, const ::pf_gossip_cli::Key* request, ::pf_gossip::Message* response);
    // 查找 message 信息
    virtual ::grpc::Status searchMessage(::grpc::ServerContext* context, const ::pf_gossip_cli::SearchInfo* request, ::pf_gossip::SearchResult* response);
    virtual ::grpc::Status getGossipNetwork(::grpc::ServerContext* context, const ::google::protobuf::Any* request, ::pf_gossip_cli::JsonValue* response);
    // 当前的网络结构
    virtual ::grpc::Status getNodeStatus(::grpc::ServerContext* context, const ::google::protobuf::Any* request, ::pf_gossip_cli::JsonValue* response);
    // 当前节点的状态信息
    virtual ::grpc::Status echo(::grpc::ServerContext* context, const ::pf_gossip_cli::Echo* request, ::pf_gossip_cli::Echo* response);
    virtual ::grpc::Status connect(::grpc::ServerContext* context, const ::pf_gossip_cli::Url* request, ::pf_gossip_cli::Echo* response);
    // 将当前节点连接到某个节点上
    virtual ::grpc::Status shutdown(::grpc::ServerContext* context, const ::google::protobuf::Any* request, ::pf_gossip_cli::Echo* response);
    // 关闭
  };
  template <class BaseClass>
  class WithAsyncMethod_addMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_addMessage() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_addMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addMessage(::grpc::ServerContext* /*context*/, const ::pf_gossip::Message* /*request*/, ::pf_gossip_cli::Echo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestaddMessage(::grpc::ServerContext* context, ::pf_gossip::Message* request, ::grpc::ServerAsyncResponseWriter< ::pf_gossip_cli::Echo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_deleteMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_deleteMessage() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_deleteMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteMessage(::grpc::ServerContext* /*context*/, const ::pf_gossip_cli::Key* /*request*/, ::pf_gossip_cli::Echo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdeleteMessage(::grpc::ServerContext* context, ::pf_gossip_cli::Key* request, ::grpc::ServerAsyncResponseWriter< ::pf_gossip_cli::Echo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getMessage() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_getMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMessage(::grpc::ServerContext* /*context*/, const ::pf_gossip_cli::Key* /*request*/, ::pf_gossip::Message* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetMessage(::grpc::ServerContext* context, ::pf_gossip_cli::Key* request, ::grpc::ServerAsyncResponseWriter< ::pf_gossip::Message>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_searchMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_searchMessage() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_searchMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status searchMessage(::grpc::ServerContext* /*context*/, const ::pf_gossip_cli::SearchInfo* /*request*/, ::pf_gossip::SearchResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsearchMessage(::grpc::ServerContext* context, ::pf_gossip_cli::SearchInfo* request, ::grpc::ServerAsyncResponseWriter< ::pf_gossip::SearchResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getGossipNetwork : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getGossipNetwork() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_getGossipNetwork() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGossipNetwork(::grpc::ServerContext* /*context*/, const ::google::protobuf::Any* /*request*/, ::pf_gossip_cli::JsonValue* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetGossipNetwork(::grpc::ServerContext* context, ::google::protobuf::Any* request, ::grpc::ServerAsyncResponseWriter< ::pf_gossip_cli::JsonValue>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getNodeStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getNodeStatus() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_getNodeStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getNodeStatus(::grpc::ServerContext* /*context*/, const ::google::protobuf::Any* /*request*/, ::pf_gossip_cli::JsonValue* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetNodeStatus(::grpc::ServerContext* context, ::google::protobuf::Any* request, ::grpc::ServerAsyncResponseWriter< ::pf_gossip_cli::JsonValue>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_echo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_echo() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_echo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status echo(::grpc::ServerContext* /*context*/, const ::pf_gossip_cli::Echo* /*request*/, ::pf_gossip_cli::Echo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestecho(::grpc::ServerContext* context, ::pf_gossip_cli::Echo* request, ::grpc::ServerAsyncResponseWriter< ::pf_gossip_cli::Echo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_connect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_connect() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_connect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status connect(::grpc::ServerContext* /*context*/, const ::pf_gossip_cli::Url* /*request*/, ::pf_gossip_cli::Echo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestconnect(::grpc::ServerContext* context, ::pf_gossip_cli::Url* request, ::grpc::ServerAsyncResponseWriter< ::pf_gossip_cli::Echo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_shutdown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_shutdown() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_shutdown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status shutdown(::grpc::ServerContext* /*context*/, const ::google::protobuf::Any* /*request*/, ::pf_gossip_cli::Echo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestshutdown(::grpc::ServerContext* context, ::google::protobuf::Any* request, ::grpc::ServerAsyncResponseWriter< ::pf_gossip_cli::Echo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_addMessage<WithAsyncMethod_deleteMessage<WithAsyncMethod_getMessage<WithAsyncMethod_searchMessage<WithAsyncMethod_getGossipNetwork<WithAsyncMethod_getNodeStatus<WithAsyncMethod_echo<WithAsyncMethod_connect<WithAsyncMethod_shutdown<Service > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_addMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_addMessage() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::pf_gossip::Message, ::pf_gossip_cli::Echo>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::pf_gossip::Message* request, ::pf_gossip_cli::Echo* response) { return this->addMessage(context, request, response); }));}
    void SetMessageAllocatorFor_addMessage(
        ::grpc::MessageAllocator< ::pf_gossip::Message, ::pf_gossip_cli::Echo>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::pf_gossip::Message, ::pf_gossip_cli::Echo>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_addMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addMessage(::grpc::ServerContext* /*context*/, const ::pf_gossip::Message* /*request*/, ::pf_gossip_cli::Echo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* addMessage(
      ::grpc::CallbackServerContext* /*context*/, const ::pf_gossip::Message* /*request*/, ::pf_gossip_cli::Echo* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_deleteMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_deleteMessage() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::pf_gossip_cli::Key, ::pf_gossip_cli::Echo>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::pf_gossip_cli::Key* request, ::pf_gossip_cli::Echo* response) { return this->deleteMessage(context, request, response); }));}
    void SetMessageAllocatorFor_deleteMessage(
        ::grpc::MessageAllocator< ::pf_gossip_cli::Key, ::pf_gossip_cli::Echo>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::pf_gossip_cli::Key, ::pf_gossip_cli::Echo>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_deleteMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteMessage(::grpc::ServerContext* /*context*/, const ::pf_gossip_cli::Key* /*request*/, ::pf_gossip_cli::Echo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* deleteMessage(
      ::grpc::CallbackServerContext* /*context*/, const ::pf_gossip_cli::Key* /*request*/, ::pf_gossip_cli::Echo* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getMessage() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::pf_gossip_cli::Key, ::pf_gossip::Message>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::pf_gossip_cli::Key* request, ::pf_gossip::Message* response) { return this->getMessage(context, request, response); }));}
    void SetMessageAllocatorFor_getMessage(
        ::grpc::MessageAllocator< ::pf_gossip_cli::Key, ::pf_gossip::Message>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::pf_gossip_cli::Key, ::pf_gossip::Message>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMessage(::grpc::ServerContext* /*context*/, const ::pf_gossip_cli::Key* /*request*/, ::pf_gossip::Message* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getMessage(
      ::grpc::CallbackServerContext* /*context*/, const ::pf_gossip_cli::Key* /*request*/, ::pf_gossip::Message* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_searchMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_searchMessage() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::pf_gossip_cli::SearchInfo, ::pf_gossip::SearchResult>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::pf_gossip_cli::SearchInfo* request, ::pf_gossip::SearchResult* response) { return this->searchMessage(context, request, response); }));}
    void SetMessageAllocatorFor_searchMessage(
        ::grpc::MessageAllocator< ::pf_gossip_cli::SearchInfo, ::pf_gossip::SearchResult>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::pf_gossip_cli::SearchInfo, ::pf_gossip::SearchResult>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_searchMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status searchMessage(::grpc::ServerContext* /*context*/, const ::pf_gossip_cli::SearchInfo* /*request*/, ::pf_gossip::SearchResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* searchMessage(
      ::grpc::CallbackServerContext* /*context*/, const ::pf_gossip_cli::SearchInfo* /*request*/, ::pf_gossip::SearchResult* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getGossipNetwork : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getGossipNetwork() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Any, ::pf_gossip_cli::JsonValue>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::protobuf::Any* request, ::pf_gossip_cli::JsonValue* response) { return this->getGossipNetwork(context, request, response); }));}
    void SetMessageAllocatorFor_getGossipNetwork(
        ::grpc::MessageAllocator< ::google::protobuf::Any, ::pf_gossip_cli::JsonValue>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Any, ::pf_gossip_cli::JsonValue>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getGossipNetwork() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGossipNetwork(::grpc::ServerContext* /*context*/, const ::google::protobuf::Any* /*request*/, ::pf_gossip_cli::JsonValue* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getGossipNetwork(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::Any* /*request*/, ::pf_gossip_cli::JsonValue* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getNodeStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getNodeStatus() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Any, ::pf_gossip_cli::JsonValue>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::protobuf::Any* request, ::pf_gossip_cli::JsonValue* response) { return this->getNodeStatus(context, request, response); }));}
    void SetMessageAllocatorFor_getNodeStatus(
        ::grpc::MessageAllocator< ::google::protobuf::Any, ::pf_gossip_cli::JsonValue>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Any, ::pf_gossip_cli::JsonValue>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getNodeStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getNodeStatus(::grpc::ServerContext* /*context*/, const ::google::protobuf::Any* /*request*/, ::pf_gossip_cli::JsonValue* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getNodeStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::Any* /*request*/, ::pf_gossip_cli::JsonValue* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_echo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_echo() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::pf_gossip_cli::Echo, ::pf_gossip_cli::Echo>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::pf_gossip_cli::Echo* request, ::pf_gossip_cli::Echo* response) { return this->echo(context, request, response); }));}
    void SetMessageAllocatorFor_echo(
        ::grpc::MessageAllocator< ::pf_gossip_cli::Echo, ::pf_gossip_cli::Echo>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::pf_gossip_cli::Echo, ::pf_gossip_cli::Echo>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_echo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status echo(::grpc::ServerContext* /*context*/, const ::pf_gossip_cli::Echo* /*request*/, ::pf_gossip_cli::Echo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* echo(
      ::grpc::CallbackServerContext* /*context*/, const ::pf_gossip_cli::Echo* /*request*/, ::pf_gossip_cli::Echo* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_connect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_connect() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::pf_gossip_cli::Url, ::pf_gossip_cli::Echo>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::pf_gossip_cli::Url* request, ::pf_gossip_cli::Echo* response) { return this->connect(context, request, response); }));}
    void SetMessageAllocatorFor_connect(
        ::grpc::MessageAllocator< ::pf_gossip_cli::Url, ::pf_gossip_cli::Echo>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::pf_gossip_cli::Url, ::pf_gossip_cli::Echo>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_connect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status connect(::grpc::ServerContext* /*context*/, const ::pf_gossip_cli::Url* /*request*/, ::pf_gossip_cli::Echo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* connect(
      ::grpc::CallbackServerContext* /*context*/, const ::pf_gossip_cli::Url* /*request*/, ::pf_gossip_cli::Echo* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_shutdown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_shutdown() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Any, ::pf_gossip_cli::Echo>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::protobuf::Any* request, ::pf_gossip_cli::Echo* response) { return this->shutdown(context, request, response); }));}
    void SetMessageAllocatorFor_shutdown(
        ::grpc::MessageAllocator< ::google::protobuf::Any, ::pf_gossip_cli::Echo>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Any, ::pf_gossip_cli::Echo>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_shutdown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status shutdown(::grpc::ServerContext* /*context*/, const ::google::protobuf::Any* /*request*/, ::pf_gossip_cli::Echo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* shutdown(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::Any* /*request*/, ::pf_gossip_cli::Echo* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_addMessage<WithCallbackMethod_deleteMessage<WithCallbackMethod_getMessage<WithCallbackMethod_searchMessage<WithCallbackMethod_getGossipNetwork<WithCallbackMethod_getNodeStatus<WithCallbackMethod_echo<WithCallbackMethod_connect<WithCallbackMethod_shutdown<Service > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_addMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_addMessage() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_addMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addMessage(::grpc::ServerContext* /*context*/, const ::pf_gossip::Message* /*request*/, ::pf_gossip_cli::Echo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_deleteMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_deleteMessage() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_deleteMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteMessage(::grpc::ServerContext* /*context*/, const ::pf_gossip_cli::Key* /*request*/, ::pf_gossip_cli::Echo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getMessage() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_getMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMessage(::grpc::ServerContext* /*context*/, const ::pf_gossip_cli::Key* /*request*/, ::pf_gossip::Message* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_searchMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_searchMessage() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_searchMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status searchMessage(::grpc::ServerContext* /*context*/, const ::pf_gossip_cli::SearchInfo* /*request*/, ::pf_gossip::SearchResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getGossipNetwork : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getGossipNetwork() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_getGossipNetwork() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGossipNetwork(::grpc::ServerContext* /*context*/, const ::google::protobuf::Any* /*request*/, ::pf_gossip_cli::JsonValue* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getNodeStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getNodeStatus() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_getNodeStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getNodeStatus(::grpc::ServerContext* /*context*/, const ::google::protobuf::Any* /*request*/, ::pf_gossip_cli::JsonValue* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_echo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_echo() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_echo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status echo(::grpc::ServerContext* /*context*/, const ::pf_gossip_cli::Echo* /*request*/, ::pf_gossip_cli::Echo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_connect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_connect() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_connect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status connect(::grpc::ServerContext* /*context*/, const ::pf_gossip_cli::Url* /*request*/, ::pf_gossip_cli::Echo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_shutdown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_shutdown() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_shutdown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status shutdown(::grpc::ServerContext* /*context*/, const ::google::protobuf::Any* /*request*/, ::pf_gossip_cli::Echo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_addMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_addMessage() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_addMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addMessage(::grpc::ServerContext* /*context*/, const ::pf_gossip::Message* /*request*/, ::pf_gossip_cli::Echo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestaddMessage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_deleteMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_deleteMessage() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_deleteMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteMessage(::grpc::ServerContext* /*context*/, const ::pf_gossip_cli::Key* /*request*/, ::pf_gossip_cli::Echo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdeleteMessage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getMessage() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_getMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMessage(::grpc::ServerContext* /*context*/, const ::pf_gossip_cli::Key* /*request*/, ::pf_gossip::Message* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetMessage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_searchMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_searchMessage() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_searchMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status searchMessage(::grpc::ServerContext* /*context*/, const ::pf_gossip_cli::SearchInfo* /*request*/, ::pf_gossip::SearchResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsearchMessage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getGossipNetwork : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getGossipNetwork() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_getGossipNetwork() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGossipNetwork(::grpc::ServerContext* /*context*/, const ::google::protobuf::Any* /*request*/, ::pf_gossip_cli::JsonValue* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetGossipNetwork(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getNodeStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getNodeStatus() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_getNodeStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getNodeStatus(::grpc::ServerContext* /*context*/, const ::google::protobuf::Any* /*request*/, ::pf_gossip_cli::JsonValue* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetNodeStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_echo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_echo() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_echo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status echo(::grpc::ServerContext* /*context*/, const ::pf_gossip_cli::Echo* /*request*/, ::pf_gossip_cli::Echo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestecho(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_connect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_connect() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_connect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status connect(::grpc::ServerContext* /*context*/, const ::pf_gossip_cli::Url* /*request*/, ::pf_gossip_cli::Echo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestconnect(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_shutdown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_shutdown() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_shutdown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status shutdown(::grpc::ServerContext* /*context*/, const ::google::protobuf::Any* /*request*/, ::pf_gossip_cli::Echo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestshutdown(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_addMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_addMessage() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->addMessage(context, request, response); }));
    }
    ~WithRawCallbackMethod_addMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addMessage(::grpc::ServerContext* /*context*/, const ::pf_gossip::Message* /*request*/, ::pf_gossip_cli::Echo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* addMessage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_deleteMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_deleteMessage() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->deleteMessage(context, request, response); }));
    }
    ~WithRawCallbackMethod_deleteMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteMessage(::grpc::ServerContext* /*context*/, const ::pf_gossip_cli::Key* /*request*/, ::pf_gossip_cli::Echo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* deleteMessage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getMessage() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getMessage(context, request, response); }));
    }
    ~WithRawCallbackMethod_getMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMessage(::grpc::ServerContext* /*context*/, const ::pf_gossip_cli::Key* /*request*/, ::pf_gossip::Message* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getMessage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_searchMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_searchMessage() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->searchMessage(context, request, response); }));
    }
    ~WithRawCallbackMethod_searchMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status searchMessage(::grpc::ServerContext* /*context*/, const ::pf_gossip_cli::SearchInfo* /*request*/, ::pf_gossip::SearchResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* searchMessage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getGossipNetwork : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getGossipNetwork() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getGossipNetwork(context, request, response); }));
    }
    ~WithRawCallbackMethod_getGossipNetwork() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGossipNetwork(::grpc::ServerContext* /*context*/, const ::google::protobuf::Any* /*request*/, ::pf_gossip_cli::JsonValue* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getGossipNetwork(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getNodeStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getNodeStatus() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getNodeStatus(context, request, response); }));
    }
    ~WithRawCallbackMethod_getNodeStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getNodeStatus(::grpc::ServerContext* /*context*/, const ::google::protobuf::Any* /*request*/, ::pf_gossip_cli::JsonValue* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getNodeStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_echo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_echo() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->echo(context, request, response); }));
    }
    ~WithRawCallbackMethod_echo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status echo(::grpc::ServerContext* /*context*/, const ::pf_gossip_cli::Echo* /*request*/, ::pf_gossip_cli::Echo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* echo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_connect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_connect() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->connect(context, request, response); }));
    }
    ~WithRawCallbackMethod_connect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status connect(::grpc::ServerContext* /*context*/, const ::pf_gossip_cli::Url* /*request*/, ::pf_gossip_cli::Echo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* connect(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_shutdown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_shutdown() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->shutdown(context, request, response); }));
    }
    ~WithRawCallbackMethod_shutdown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status shutdown(::grpc::ServerContext* /*context*/, const ::google::protobuf::Any* /*request*/, ::pf_gossip_cli::Echo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* shutdown(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_addMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_addMessage() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::pf_gossip::Message, ::pf_gossip_cli::Echo>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::pf_gossip::Message, ::pf_gossip_cli::Echo>* streamer) {
                       return this->StreamedaddMessage(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_addMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status addMessage(::grpc::ServerContext* /*context*/, const ::pf_gossip::Message* /*request*/, ::pf_gossip_cli::Echo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedaddMessage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pf_gossip::Message,::pf_gossip_cli::Echo>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_deleteMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_deleteMessage() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::pf_gossip_cli::Key, ::pf_gossip_cli::Echo>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::pf_gossip_cli::Key, ::pf_gossip_cli::Echo>* streamer) {
                       return this->StreameddeleteMessage(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_deleteMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status deleteMessage(::grpc::ServerContext* /*context*/, const ::pf_gossip_cli::Key* /*request*/, ::pf_gossip_cli::Echo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreameddeleteMessage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pf_gossip_cli::Key,::pf_gossip_cli::Echo>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getMessage() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::pf_gossip_cli::Key, ::pf_gossip::Message>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::pf_gossip_cli::Key, ::pf_gossip::Message>* streamer) {
                       return this->StreamedgetMessage(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getMessage(::grpc::ServerContext* /*context*/, const ::pf_gossip_cli::Key* /*request*/, ::pf_gossip::Message* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetMessage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pf_gossip_cli::Key,::pf_gossip::Message>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_searchMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_searchMessage() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::pf_gossip_cli::SearchInfo, ::pf_gossip::SearchResult>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::pf_gossip_cli::SearchInfo, ::pf_gossip::SearchResult>* streamer) {
                       return this->StreamedsearchMessage(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_searchMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status searchMessage(::grpc::ServerContext* /*context*/, const ::pf_gossip_cli::SearchInfo* /*request*/, ::pf_gossip::SearchResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsearchMessage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pf_gossip_cli::SearchInfo,::pf_gossip::SearchResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getGossipNetwork : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getGossipNetwork() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::protobuf::Any, ::pf_gossip_cli::JsonValue>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::protobuf::Any, ::pf_gossip_cli::JsonValue>* streamer) {
                       return this->StreamedgetGossipNetwork(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getGossipNetwork() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getGossipNetwork(::grpc::ServerContext* /*context*/, const ::google::protobuf::Any* /*request*/, ::pf_gossip_cli::JsonValue* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetGossipNetwork(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Any,::pf_gossip_cli::JsonValue>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getNodeStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getNodeStatus() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::protobuf::Any, ::pf_gossip_cli::JsonValue>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::protobuf::Any, ::pf_gossip_cli::JsonValue>* streamer) {
                       return this->StreamedgetNodeStatus(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getNodeStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getNodeStatus(::grpc::ServerContext* /*context*/, const ::google::protobuf::Any* /*request*/, ::pf_gossip_cli::JsonValue* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetNodeStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Any,::pf_gossip_cli::JsonValue>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_echo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_echo() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::pf_gossip_cli::Echo, ::pf_gossip_cli::Echo>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::pf_gossip_cli::Echo, ::pf_gossip_cli::Echo>* streamer) {
                       return this->Streamedecho(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_echo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status echo(::grpc::ServerContext* /*context*/, const ::pf_gossip_cli::Echo* /*request*/, ::pf_gossip_cli::Echo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedecho(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pf_gossip_cli::Echo,::pf_gossip_cli::Echo>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_connect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_connect() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::pf_gossip_cli::Url, ::pf_gossip_cli::Echo>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::pf_gossip_cli::Url, ::pf_gossip_cli::Echo>* streamer) {
                       return this->Streamedconnect(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_connect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status connect(::grpc::ServerContext* /*context*/, const ::pf_gossip_cli::Url* /*request*/, ::pf_gossip_cli::Echo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedconnect(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pf_gossip_cli::Url,::pf_gossip_cli::Echo>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_shutdown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_shutdown() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::protobuf::Any, ::pf_gossip_cli::Echo>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::protobuf::Any, ::pf_gossip_cli::Echo>* streamer) {
                       return this->Streamedshutdown(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_shutdown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status shutdown(::grpc::ServerContext* /*context*/, const ::google::protobuf::Any* /*request*/, ::pf_gossip_cli::Echo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedshutdown(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Any,::pf_gossip_cli::Echo>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_addMessage<WithStreamedUnaryMethod_deleteMessage<WithStreamedUnaryMethod_getMessage<WithStreamedUnaryMethod_searchMessage<WithStreamedUnaryMethod_getGossipNetwork<WithStreamedUnaryMethod_getNodeStatus<WithStreamedUnaryMethod_echo<WithStreamedUnaryMethod_connect<WithStreamedUnaryMethod_shutdown<Service > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_addMessage<WithStreamedUnaryMethod_deleteMessage<WithStreamedUnaryMethod_getMessage<WithStreamedUnaryMethod_searchMessage<WithStreamedUnaryMethod_getGossipNetwork<WithStreamedUnaryMethod_getNodeStatus<WithStreamedUnaryMethod_echo<WithStreamedUnaryMethod_connect<WithStreamedUnaryMethod_shutdown<Service > > > > > > > > > StreamedService;
};

}  // namespace pf_gossip_cli


#endif  // GRPC_GossipCli_2eproto__INCLUDED
