syntax = "proto3";

package pf_gossip;

message Message{
  string key = 1;
  string value = 2;
}

message SearchResult{
  message Message{
    string key = 1;
    string value = 2;
    string owner = 3;
    int64 version = 4;
  }
  repeated Message message = 1;
}

message updateResult{
  int32 succeed = 1;  // 更新请求成功的条数
  int64 version = 2; // 对方节点slot的版本
}

message SlotUpdate{
  string name = 1;  // 节点名称
  int64 version = 2; // slot 的版本号
  repeated Message messages = 3; // gossip 节点的消息数量
  repeated string pass_nodes = 4; // 已经传播过节点的名称
}

message GossipNodeInfo{
  string name = 1;  // 所负责的 slot
  int64 version = 2; // 当前slot版本
  string address = 3; // 新node的地址
  repeated string pass_nodes = 4; // 已经传播过节点的名称
}

message NodeVersions{
  string node_name = 1;
  string slot_name = 2;
  int64 slot_version = 3;
}

service Gossip{
  // gossip节点内部数据库接口
  rpc search(Message) returns(SearchResult); // 分布式搜索，遍历节点并且保证最新版本
  rpc pull(SlotUpdate) returns(updateResult); // 向对方发送部分slot的信息
  rpc echo(Message) returns(Message);

  // gossip节点状态接口
  rpc EstablishConnection(GossipNodeInfo) returns(GossipNodeInfo);
  rpc heartBeat(NodeVersions) returns(NodeVersions);  // 应用层心跳，并且检查各个节点的版本，方便pull操作
  rpc newNodeNotify(GossipNodeInfo) returns(updateResult);  // 理论上这个是不需要回包信息的
  rpc deleteNodeNotify(GossipNodeInfo) returns(updateResult);  // 理论上这个是不需要回包信息的
}


