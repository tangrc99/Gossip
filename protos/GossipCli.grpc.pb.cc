// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: GossipCli.proto

#include "GossipCli.pb.h"
#include "GossipCli.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace pf_gossip_cli {

static const char* GossipClient_method_names[] = {
  "/pf_gossip_cli.GossipClient/addMessage",
  "/pf_gossip_cli.GossipClient/deleteMessage",
  "/pf_gossip_cli.GossipClient/getMessage",
  "/pf_gossip_cli.GossipClient/searchMessage",
  "/pf_gossip_cli.GossipClient/getGossipNetwork",
  "/pf_gossip_cli.GossipClient/getNodeStatus",
  "/pf_gossip_cli.GossipClient/echo",
  "/pf_gossip_cli.GossipClient/connect",
  "/pf_gossip_cli.GossipClient/shutdown",
};

std::unique_ptr< GossipClient::Stub> GossipClient::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< GossipClient::Stub> stub(new GossipClient::Stub(channel, options));
  return stub;
}

GossipClient::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_addMessage_(GossipClient_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_deleteMessage_(GossipClient_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getMessage_(GossipClient_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_searchMessage_(GossipClient_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getGossipNetwork_(GossipClient_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getNodeStatus_(GossipClient_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_echo_(GossipClient_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_connect_(GossipClient_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_shutdown_(GossipClient_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status GossipClient::Stub::addMessage(::grpc::ClientContext* context, const ::pf_gossip::Message& request, ::pf_gossip_cli::Echo* response) {
  return ::grpc::internal::BlockingUnaryCall< ::pf_gossip::Message, ::pf_gossip_cli::Echo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_addMessage_, context, request, response);
}

void GossipClient::Stub::async::addMessage(::grpc::ClientContext* context, const ::pf_gossip::Message* request, ::pf_gossip_cli::Echo* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::pf_gossip::Message, ::pf_gossip_cli::Echo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_addMessage_, context, request, response, std::move(f));
}

void GossipClient::Stub::async::addMessage(::grpc::ClientContext* context, const ::pf_gossip::Message* request, ::pf_gossip_cli::Echo* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_addMessage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::pf_gossip_cli::Echo>* GossipClient::Stub::PrepareAsyncaddMessageRaw(::grpc::ClientContext* context, const ::pf_gossip::Message& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::pf_gossip_cli::Echo, ::pf_gossip::Message, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_addMessage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::pf_gossip_cli::Echo>* GossipClient::Stub::AsyncaddMessageRaw(::grpc::ClientContext* context, const ::pf_gossip::Message& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncaddMessageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GossipClient::Stub::deleteMessage(::grpc::ClientContext* context, const ::pf_gossip_cli::Key& request, ::pf_gossip_cli::Echo* response) {
  return ::grpc::internal::BlockingUnaryCall< ::pf_gossip_cli::Key, ::pf_gossip_cli::Echo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_deleteMessage_, context, request, response);
}

void GossipClient::Stub::async::deleteMessage(::grpc::ClientContext* context, const ::pf_gossip_cli::Key* request, ::pf_gossip_cli::Echo* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::pf_gossip_cli::Key, ::pf_gossip_cli::Echo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_deleteMessage_, context, request, response, std::move(f));
}

void GossipClient::Stub::async::deleteMessage(::grpc::ClientContext* context, const ::pf_gossip_cli::Key* request, ::pf_gossip_cli::Echo* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_deleteMessage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::pf_gossip_cli::Echo>* GossipClient::Stub::PrepareAsyncdeleteMessageRaw(::grpc::ClientContext* context, const ::pf_gossip_cli::Key& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::pf_gossip_cli::Echo, ::pf_gossip_cli::Key, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_deleteMessage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::pf_gossip_cli::Echo>* GossipClient::Stub::AsyncdeleteMessageRaw(::grpc::ClientContext* context, const ::pf_gossip_cli::Key& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncdeleteMessageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GossipClient::Stub::getMessage(::grpc::ClientContext* context, const ::pf_gossip_cli::Key& request, ::pf_gossip::Message* response) {
  return ::grpc::internal::BlockingUnaryCall< ::pf_gossip_cli::Key, ::pf_gossip::Message, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getMessage_, context, request, response);
}

void GossipClient::Stub::async::getMessage(::grpc::ClientContext* context, const ::pf_gossip_cli::Key* request, ::pf_gossip::Message* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::pf_gossip_cli::Key, ::pf_gossip::Message, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getMessage_, context, request, response, std::move(f));
}

void GossipClient::Stub::async::getMessage(::grpc::ClientContext* context, const ::pf_gossip_cli::Key* request, ::pf_gossip::Message* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getMessage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::pf_gossip::Message>* GossipClient::Stub::PrepareAsyncgetMessageRaw(::grpc::ClientContext* context, const ::pf_gossip_cli::Key& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::pf_gossip::Message, ::pf_gossip_cli::Key, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getMessage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::pf_gossip::Message>* GossipClient::Stub::AsyncgetMessageRaw(::grpc::ClientContext* context, const ::pf_gossip_cli::Key& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetMessageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GossipClient::Stub::searchMessage(::grpc::ClientContext* context, const ::pf_gossip_cli::SearchInfo& request, ::pf_gossip::SearchResult* response) {
  return ::grpc::internal::BlockingUnaryCall< ::pf_gossip_cli::SearchInfo, ::pf_gossip::SearchResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_searchMessage_, context, request, response);
}

void GossipClient::Stub::async::searchMessage(::grpc::ClientContext* context, const ::pf_gossip_cli::SearchInfo* request, ::pf_gossip::SearchResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::pf_gossip_cli::SearchInfo, ::pf_gossip::SearchResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_searchMessage_, context, request, response, std::move(f));
}

void GossipClient::Stub::async::searchMessage(::grpc::ClientContext* context, const ::pf_gossip_cli::SearchInfo* request, ::pf_gossip::SearchResult* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_searchMessage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::pf_gossip::SearchResult>* GossipClient::Stub::PrepareAsyncsearchMessageRaw(::grpc::ClientContext* context, const ::pf_gossip_cli::SearchInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::pf_gossip::SearchResult, ::pf_gossip_cli::SearchInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_searchMessage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::pf_gossip::SearchResult>* GossipClient::Stub::AsyncsearchMessageRaw(::grpc::ClientContext* context, const ::pf_gossip_cli::SearchInfo& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsearchMessageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GossipClient::Stub::getGossipNetwork(::grpc::ClientContext* context, const ::google::protobuf::Any& request, ::pf_gossip_cli::JsonValue* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Any, ::pf_gossip_cli::JsonValue, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getGossipNetwork_, context, request, response);
}

void GossipClient::Stub::async::getGossipNetwork(::grpc::ClientContext* context, const ::google::protobuf::Any* request, ::pf_gossip_cli::JsonValue* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Any, ::pf_gossip_cli::JsonValue, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getGossipNetwork_, context, request, response, std::move(f));
}

void GossipClient::Stub::async::getGossipNetwork(::grpc::ClientContext* context, const ::google::protobuf::Any* request, ::pf_gossip_cli::JsonValue* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getGossipNetwork_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::pf_gossip_cli::JsonValue>* GossipClient::Stub::PrepareAsyncgetGossipNetworkRaw(::grpc::ClientContext* context, const ::google::protobuf::Any& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::pf_gossip_cli::JsonValue, ::google::protobuf::Any, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getGossipNetwork_, context, request);
}

::grpc::ClientAsyncResponseReader< ::pf_gossip_cli::JsonValue>* GossipClient::Stub::AsyncgetGossipNetworkRaw(::grpc::ClientContext* context, const ::google::protobuf::Any& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetGossipNetworkRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GossipClient::Stub::getNodeStatus(::grpc::ClientContext* context, const ::google::protobuf::Any& request, ::pf_gossip_cli::JsonValue* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Any, ::pf_gossip_cli::JsonValue, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getNodeStatus_, context, request, response);
}

void GossipClient::Stub::async::getNodeStatus(::grpc::ClientContext* context, const ::google::protobuf::Any* request, ::pf_gossip_cli::JsonValue* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Any, ::pf_gossip_cli::JsonValue, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getNodeStatus_, context, request, response, std::move(f));
}

void GossipClient::Stub::async::getNodeStatus(::grpc::ClientContext* context, const ::google::protobuf::Any* request, ::pf_gossip_cli::JsonValue* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getNodeStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::pf_gossip_cli::JsonValue>* GossipClient::Stub::PrepareAsyncgetNodeStatusRaw(::grpc::ClientContext* context, const ::google::protobuf::Any& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::pf_gossip_cli::JsonValue, ::google::protobuf::Any, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getNodeStatus_, context, request);
}

::grpc::ClientAsyncResponseReader< ::pf_gossip_cli::JsonValue>* GossipClient::Stub::AsyncgetNodeStatusRaw(::grpc::ClientContext* context, const ::google::protobuf::Any& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetNodeStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GossipClient::Stub::echo(::grpc::ClientContext* context, const ::pf_gossip_cli::Echo& request, ::pf_gossip_cli::Echo* response) {
  return ::grpc::internal::BlockingUnaryCall< ::pf_gossip_cli::Echo, ::pf_gossip_cli::Echo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_echo_, context, request, response);
}

void GossipClient::Stub::async::echo(::grpc::ClientContext* context, const ::pf_gossip_cli::Echo* request, ::pf_gossip_cli::Echo* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::pf_gossip_cli::Echo, ::pf_gossip_cli::Echo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_echo_, context, request, response, std::move(f));
}

void GossipClient::Stub::async::echo(::grpc::ClientContext* context, const ::pf_gossip_cli::Echo* request, ::pf_gossip_cli::Echo* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_echo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::pf_gossip_cli::Echo>* GossipClient::Stub::PrepareAsyncechoRaw(::grpc::ClientContext* context, const ::pf_gossip_cli::Echo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::pf_gossip_cli::Echo, ::pf_gossip_cli::Echo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_echo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::pf_gossip_cli::Echo>* GossipClient::Stub::AsyncechoRaw(::grpc::ClientContext* context, const ::pf_gossip_cli::Echo& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncechoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GossipClient::Stub::connect(::grpc::ClientContext* context, const ::pf_gossip_cli::Url& request, ::pf_gossip_cli::Echo* response) {
  return ::grpc::internal::BlockingUnaryCall< ::pf_gossip_cli::Url, ::pf_gossip_cli::Echo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_connect_, context, request, response);
}

void GossipClient::Stub::async::connect(::grpc::ClientContext* context, const ::pf_gossip_cli::Url* request, ::pf_gossip_cli::Echo* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::pf_gossip_cli::Url, ::pf_gossip_cli::Echo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_connect_, context, request, response, std::move(f));
}

void GossipClient::Stub::async::connect(::grpc::ClientContext* context, const ::pf_gossip_cli::Url* request, ::pf_gossip_cli::Echo* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_connect_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::pf_gossip_cli::Echo>* GossipClient::Stub::PrepareAsyncconnectRaw(::grpc::ClientContext* context, const ::pf_gossip_cli::Url& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::pf_gossip_cli::Echo, ::pf_gossip_cli::Url, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_connect_, context, request);
}

::grpc::ClientAsyncResponseReader< ::pf_gossip_cli::Echo>* GossipClient::Stub::AsyncconnectRaw(::grpc::ClientContext* context, const ::pf_gossip_cli::Url& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncconnectRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GossipClient::Stub::shutdown(::grpc::ClientContext* context, const ::google::protobuf::Any& request, ::pf_gossip_cli::Echo* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Any, ::pf_gossip_cli::Echo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_shutdown_, context, request, response);
}

void GossipClient::Stub::async::shutdown(::grpc::ClientContext* context, const ::google::protobuf::Any* request, ::pf_gossip_cli::Echo* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Any, ::pf_gossip_cli::Echo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_shutdown_, context, request, response, std::move(f));
}

void GossipClient::Stub::async::shutdown(::grpc::ClientContext* context, const ::google::protobuf::Any* request, ::pf_gossip_cli::Echo* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_shutdown_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::pf_gossip_cli::Echo>* GossipClient::Stub::PrepareAsyncshutdownRaw(::grpc::ClientContext* context, const ::google::protobuf::Any& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::pf_gossip_cli::Echo, ::google::protobuf::Any, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_shutdown_, context, request);
}

::grpc::ClientAsyncResponseReader< ::pf_gossip_cli::Echo>* GossipClient::Stub::AsyncshutdownRaw(::grpc::ClientContext* context, const ::google::protobuf::Any& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncshutdownRaw(context, request, cq);
  result->StartCall();
  return result;
}

GossipClient::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GossipClient_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GossipClient::Service, ::pf_gossip::Message, ::pf_gossip_cli::Echo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GossipClient::Service* service,
             ::grpc::ServerContext* ctx,
             const ::pf_gossip::Message* req,
             ::pf_gossip_cli::Echo* resp) {
               return service->addMessage(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GossipClient_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GossipClient::Service, ::pf_gossip_cli::Key, ::pf_gossip_cli::Echo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GossipClient::Service* service,
             ::grpc::ServerContext* ctx,
             const ::pf_gossip_cli::Key* req,
             ::pf_gossip_cli::Echo* resp) {
               return service->deleteMessage(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GossipClient_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GossipClient::Service, ::pf_gossip_cli::Key, ::pf_gossip::Message, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GossipClient::Service* service,
             ::grpc::ServerContext* ctx,
             const ::pf_gossip_cli::Key* req,
             ::pf_gossip::Message* resp) {
               return service->getMessage(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GossipClient_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GossipClient::Service, ::pf_gossip_cli::SearchInfo, ::pf_gossip::SearchResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GossipClient::Service* service,
             ::grpc::ServerContext* ctx,
             const ::pf_gossip_cli::SearchInfo* req,
             ::pf_gossip::SearchResult* resp) {
               return service->searchMessage(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GossipClient_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GossipClient::Service, ::google::protobuf::Any, ::pf_gossip_cli::JsonValue, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GossipClient::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Any* req,
             ::pf_gossip_cli::JsonValue* resp) {
               return service->getGossipNetwork(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GossipClient_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GossipClient::Service, ::google::protobuf::Any, ::pf_gossip_cli::JsonValue, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GossipClient::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Any* req,
             ::pf_gossip_cli::JsonValue* resp) {
               return service->getNodeStatus(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GossipClient_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GossipClient::Service, ::pf_gossip_cli::Echo, ::pf_gossip_cli::Echo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GossipClient::Service* service,
             ::grpc::ServerContext* ctx,
             const ::pf_gossip_cli::Echo* req,
             ::pf_gossip_cli::Echo* resp) {
               return service->echo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GossipClient_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GossipClient::Service, ::pf_gossip_cli::Url, ::pf_gossip_cli::Echo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GossipClient::Service* service,
             ::grpc::ServerContext* ctx,
             const ::pf_gossip_cli::Url* req,
             ::pf_gossip_cli::Echo* resp) {
               return service->connect(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GossipClient_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GossipClient::Service, ::google::protobuf::Any, ::pf_gossip_cli::Echo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GossipClient::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Any* req,
             ::pf_gossip_cli::Echo* resp) {
               return service->shutdown(ctx, req, resp);
             }, this)));
}

GossipClient::Service::~Service() {
}

::grpc::Status GossipClient::Service::addMessage(::grpc::ServerContext* context, const ::pf_gossip::Message* request, ::pf_gossip_cli::Echo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GossipClient::Service::deleteMessage(::grpc::ServerContext* context, const ::pf_gossip_cli::Key* request, ::pf_gossip_cli::Echo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GossipClient::Service::getMessage(::grpc::ServerContext* context, const ::pf_gossip_cli::Key* request, ::pf_gossip::Message* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GossipClient::Service::searchMessage(::grpc::ServerContext* context, const ::pf_gossip_cli::SearchInfo* request, ::pf_gossip::SearchResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GossipClient::Service::getGossipNetwork(::grpc::ServerContext* context, const ::google::protobuf::Any* request, ::pf_gossip_cli::JsonValue* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GossipClient::Service::getNodeStatus(::grpc::ServerContext* context, const ::google::protobuf::Any* request, ::pf_gossip_cli::JsonValue* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GossipClient::Service::echo(::grpc::ServerContext* context, const ::pf_gossip_cli::Echo* request, ::pf_gossip_cli::Echo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GossipClient::Service::connect(::grpc::ServerContext* context, const ::pf_gossip_cli::Url* request, ::pf_gossip_cli::Echo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GossipClient::Service::shutdown(::grpc::ServerContext* context, const ::google::protobuf::Any* request, ::pf_gossip_cli::Echo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace pf_gossip_cli

